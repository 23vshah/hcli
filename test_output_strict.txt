    import json and typing utilities (List, Dict, Optional)  (lines 1–2)
    class Task
        constructor __init__(takes title, description, done)  (lines 6–10)
            initialize task with title, description, done status, and empty subtasks list
        method add_subtask(takes subtask)  (lines 12–13)
            append the given subtask to this task's subtasks list
        method mark_done()
            set this task's done status to True  (lines 16–16)
            iterate through all subtasks and mark each one done  (lines 17–18)
        method to_dict()  (lines 20–26)
            return a dictionary representation with title, description, done status, and recursively converted subtasks
        method __str__(takes level)
            create indentation based on level, determine status symbol ([x] or [ ]), and format the main task line  (lines 29–31)
            iterate through subtasks and append their string representations with increased indentation level  (lines 32–33)
            return the formatted task hierarchy string  (lines 34–34)
    class TaskManager
        constructor __init__()  (lines 38–39)
            initialize with an empty list of tasks
        method add_task(takes title, description)  (lines 41–44)
            create a new Task, add it to the tasks list, and return the created task
        method find_task(takes title)
            nested function _find(takes task_list)
                iterate through tasks, return immediately if title matches, otherwise recursively search subtasks and return if found  (lines 48–53)
                return None if task not found  (lines 54–54)
            call the nested _find function with the manager's tasks list  (lines 56–56)
        method mark_done(takes title)
            find the task by title  (lines 59–59)
            if task exists, mark it done and return True, otherwise return False  (lines 60–63)
        method export_to_json(takes file_name)  (lines 65–67)
            export tasks to JSON file using with statement
        method __str__()
            initialize empty result string  (lines 70–70)
            iterate through all tasks and append their string representations to result  (lines 71–72)
            return the concatenated task strings  (lines 73–73)
    when run as main: create TaskManager, add study and workout tasks with nested subtasks, mark one task done, print the hierarchy, export to JSON, and confirm export completion  (lines 76–107)