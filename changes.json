{
  "file1": "test01_strict_op.txt",
  "file2": "test01_user_op.txt",
  "ast_file": "/Users/krishnapagrut/Developer/hcli_test/out/test01.pyh.ast.json",
  "total_changes": 5,
  "changes": [
    {
      "node_id": "MathUtils_factorial",
      "node_type": "method_definition",
      "signature": "method factorial(self, n) -> ReturnType",
      "description": null,
      "line_range": [
        0,
        0
      ],
      "change_type": "changed",
      "affected_output_lines": [
        2
      ],
      "original_content": "        method factorial(self, n) -> ReturnType",
      "modified_content": "        method factorial(self, n: int) -> int"
    },
    {
      "node_id": "docstring",
      "node_type": "docstring",
      "signature": null,
      "description": "docstring explaining this is a recursive factorial implementation, inefficient for large n",
      "line_range": [
        3,
        3
      ],
      "change_type": "changed",
      "affected_output_lines": [
        3
      ],
      "original_content": "            docstring explaining this is a recursive factorial implementation, inefficient for large n  (lines 3\u20133)",
      "modified_content": "            docstring: iterative factorial with input validation"
    },
    {
      "node_id": "if1_abstract",
      "node_type": "if_statement",
      "signature": null,
      "description": "base case: if n is less than or equal to 1, return 1",
      "line_range": [
        4,
        5
      ],
      "change_type": "changed",
      "affected_output_lines": [
        4
      ],
      "original_content": "            base case: if n is less than or equal to 1, return 1  (lines 4\u20135)",
      "modified_content": "            if n is negative, raise ValueError"
    },
    {
      "node_id": "recursive_call",
      "node_type": "return_statement",
      "signature": null,
      "description": "recursive case: return n multiplied by factorial of (n-1)",
      "line_range": [
        6,
        6
      ],
      "change_type": "changed",
      "affected_output_lines": [
        5
      ],
      "original_content": "            recursive case: return n multiplied by factorial of (n-1)  (lines 6\u20136)",
      "modified_content": "            otherwise, loop from 2 to n and multiply into result"
    },
    {
      "node_id": "if2_abstract",
      "node_type": "if_statement",
      "signature": null,
      "description": "when run as main: create MathUtils instance and print factorial of 5",
      "line_range": [
        9,
        11
      ],
      "change_type": "changed",
      "affected_output_lines": [
        6
      ],
      "original_content": "    when run as main: create MathUtils instance and print factorial of 5  (lines 9\u201311)",
      "modified_content": "        method fibonacci(self, n: int) -> int"
    }
  ],
  "metadata": {
    "source_file": "/Users/krishnapagrut/Developer/hcli_test/out/test01.pyh.ast.json"
  }
}