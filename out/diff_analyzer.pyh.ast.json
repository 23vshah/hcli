{
  "phy_chunks": {
    "main": {
      "id": "main",
      "type": "module",
      "children": [
        {
          "id": "module_docstring",
          "type": "docstring",
          "description": "module docstring describing Diff Analyzer that combines file diffing and AST mapping to output changes in JSON format",
          "line_range": [
            2,
            5
          ]
        },
        {
          "id": "imports",
          "type": "import_block",
          "description": "import standard libraries: json, argparse, pathlib.Path, typing annotations, dataclasses, difflib.SequenceMatcher, and enum.Enum",
          "line_range": [
            7,
            13
          ]
        },
        {
          "id": "class_ChangeType",
          "type": "class_definition",
          "signature": "class ChangeType",
          "children": [
            {
              "id": "change_type_constants",
              "type": "constant_definitions",
              "description": "define string constants for change types: ADDED, REMOVED, CHANGED, UNCHANGED",
              "line_range": [
                16,
                19
              ]
            }
          ]
        },
        {
          "id": "class_DiffResult",
          "type": "class_definition",
          "signature": "class DiffResult",
          "children": [
            {
              "id": "diff_result_fields",
              "type": "dataclass_fields",
              "description": "dataclass fields for storing diff result: line_num, change_type, original_content, modified_content",
              "line_range": [
                23,
                26
              ]
            }
          ]
        },
        {
          "id": "class_OutputLineMapping",
          "type": "class_definition",
          "signature": "class OutputLineMapping",
          "children": [
            {
              "id": "output_line_mapping_fields",
              "type": "dataclass_fields",
              "description": "dataclass fields for mapping output lines to AST nodes: line_number, node_id, node_type, signature, description, line_range, content",
              "line_range": [
                30,
                36
              ]
            }
          ]
        },
        {
          "id": "class_ChangeAnalysis",
          "type": "class_definition",
          "signature": "class ChangeAnalysis",
          "children": [
            {
              "id": "change_analysis_fields",
              "type": "dataclass_fields",
              "description": "dataclass fields for analyzing changes: node_id, node_type, signature, description, line_range, change_type, affected_output_lines, original_content, modified_content",
              "line_range": [
                40,
                48
              ]
            }
          ]
        },
        {
          "id": "class_DiffAnalyzer",
          "type": "class_definition",
          "signature": "class DiffAnalyzer",
          "children": [
            {
              "id": "DiffAnalyzer___init__",
              "type": "method_definition",
              "signature": "method __init__(takes ast_json_file, file1_path, file2_path)",
              "children": [
                {
                  "id": "init_instance_variables",
                  "type": "assignment_block",
                  "description": "initialize instance variables: ast_json_file, file1_path, file2_path, ast_data, output_line_mappings, file1_lines, file2_lines",
                  "line_range": [
                    52,
                    58
                  ]
                }
              ]
            },
            {
              "id": "DiffAnalyzer_load_files",
              "type": "method_definition",
              "signature": "method load_files()",
              "children": [
                {
                  "id": "load_files_docstring",
                  "type": "docstring",
                  "description": "docstring: Load both files and AST data",
                  "line_range": [
                    61,
                    61
                  ]
                },
                {
                  "id": "try_load_files",
                  "type": "try_statement",
                  "description": "try to open and read file1, file2, and AST JSON file, validate AST structure has phy_chunks/main, return True on success, catch exceptions and return False",
                  "line_range": [
                    62,
                    79
                  ]
                }
              ]
            },
            {
              "id": "DiffAnalyzer_get_detailed_diff",
              "type": "method_definition",
              "signature": "method get_detailed_diff()",
              "children": [
                {
                  "id": "get_detailed_diff_docstring",
                  "type": "docstring",
                  "description": "docstring: Get detailed differences between the two files",
                  "line_range": [
                    82,
                    82
                  ]
                },
                {
                  "id": "early_return_check",
                  "type": "if_statement",
                  "description": "return empty list if either file has no lines",
                  "line_range": [
                    83,
                    84
                  ]
                },
                {
                  "id": "setup_diff_analysis",
                  "type": "assignment_block",
                  "description": "initialize results list and create SequenceMatcher for comparing file lines",
                  "line_range": [
                    86,
                    87
                  ]
                },
                {
                  "id": "process_diff_opcodes",
                  "type": "for_loop",
                  "description": "iterate through diff opcodes from SequenceMatcher, handle equal/delete/insert/replace operations by creating DiffResult objects with appropriate change types and content",
                  "line_range": [
                    89,
                    129
                  ]
                },
                {
                  "id": "return_results",
                  "type": "return_statement",
                  "description": "return the list of diff results",
                  "line_range": [
                    131,
                    131
                  ]
                }
              ]
            },
            {
              "id": "DiffAnalyzer_build_output_line_mappings",
              "type": "method_definition",
              "signature": "method build_output_line_mappings()",
              "children": [
                {
                  "id": "build_mappings_docstring",
                  "type": "docstring",
                  "description": "docstring: Build mappings from output lines to AST nodes by simulating the render process",
                  "line_range": [
                    134,
                    134
                  ]
                },
                {
                  "id": "early_return_no_ast",
                  "type": "if_statement",
                  "description": "return early if no AST data loaded",
                  "line_range": [
                    135,
                    136
                  ]
                },
                {
                  "id": "initialize_mappings",
                  "type": "assignment_block",
                  "description": "initialize empty output_line_mappings list and get root AST node",
                  "line_range": [
                    138,
                    139
                  ]
                },
                {
                  "id": "function_render_node_with_mapping",
                  "type": "function_definition",
                  "signature": "function render_node_with_mapping(takes node, indent, line_counter)",
                  "children": [
                    {
                      "id": "render_function_docstring",
                      "type": "docstring",
                      "description": "docstring: Render node and track line mappings",
                      "line_range": [
                        142,
                        142
                      ]
                    },
                    {
                      "id": "setup_render_variables",
                      "type": "assignment_block",
                      "description": "initialize lines list, padding string, and extract node properties (signature, description, line_range, node_id, node_type)",
                      "line_range": [
                        143,
                        150
                      ]
                    },
                    {
                      "id": "setup_line_info",
                      "type": "assignment_block",
                      "description": "initialize line_info string and add line range information if available",
                      "line_range": [
                        153,
                        155
                      ]
                    },
                    {
                      "id": "render_node_content",
                      "type": "if_else_block",
                      "description": "if node has signature: render signature line and optionally description line, create OutputLineMapping for each; else if node has description: render description line and create OutputLineMapping",
                      "line_range": [
                        158,
                        203
                      ]
                    },
                    {
                      "id": "render_children",
                      "type": "for_loop",
                      "description": "recursively render all child nodes with increased indentation",
                      "line_range": [
                        206,
                        207
                      ]
                    },
                    {
                      "id": "return_lines",
                      "type": "return_statement",
                      "description": "return the rendered lines",
                      "line_range": [
                        209,
                        209
                      ]
                    }
                  ]
                },
                {
                  "id": "call_render_function",
                  "type": "function_call",
                  "description": "call render_node_with_mapping with the root node",
                  "line_range": [
                    212,
                    212
                  ]
                }
              ]
            },
            {
              "id": "DiffAnalyzer_find_ast_node_for_output_line",
              "type": "method_definition",
              "signature": "method find_ast_node_for_output_line(takes output_line_num)",
              "children": [
                {
                  "id": "find_node_docstring",
                  "type": "docstring",
                  "description": "docstring: Find the AST node that corresponds to a specific output line",
                  "line_range": [
                    215,
                    215
                  ]
                },
                {
                  "id": "search_mappings",
                  "type": "for_loop",
                  "description": "iterate through output_line_mappings and return mapping if line_number matches",
                  "line_range": [
                    216,
                    218
                  ]
                },
                {
                  "id": "return_none",
                  "type": "return_statement",
                  "description": "return None if no mapping found",
                  "line_range": [
                    219,
                    219
                  ]
                }
              ]
            },
            {
              "id": "DiffAnalyzer_analyze_changes",
              "type": "method_definition",
              "signature": "method analyze_changes()",
              "children": [
                {
                  "id": "analyze_changes_docstring",
                  "type": "docstring",
                  "description": "docstring: Analyze changes and map them to AST nodes",
                  "line_range": [
                    222,
                    222
                  ]
                },
                {
                  "id": "early_return_load_fail",
                  "type": "if_statement",
                  "description": "return empty list if file loading fails",
                  "line_range": [
                    223,
                    224
                  ]
                },
                {
                  "id": "get_diff_and_build_mappings",
                  "type": "method_calls",
                  "description": "get detailed diff results and build output line mappings",
                  "line_range": [
                    227,
                    230
                  ]
                },
                {
                  "id": "initialize_change_tracking",
                  "type": "assignment_block",
                  "description": "initialize changes list and processed_node_ids set",
                  "line_range": [
                    233,
                    234
                  ]
                },
                {
                  "id": "process_diff_results",
                  "type": "for_loop",
                  "description": "iterate through diff results, skip unchanged items, find AST node mapping for each line, create ChangeAnalysis objects for new node changes",
                  "line_range": [
                    236,
                    256
                  ]
                },
                {
                  "id": "return_changes",
                  "type": "return_statement",
                  "description": "return the list of analyzed changes",
                  "line_range": [
                    258,
                    258
                  ]
                }
              ]
            },
            {
              "id": "DiffAnalyzer_to_json",
              "type": "method_definition",
              "signature": "method to_json(takes changes)",
              "children": [
                {
                  "id": "to_json_docstring",
                  "type": "docstring",
                  "description": "docstring: Convert changes to JSON format",
                  "line_range": [
                    261,
                    261
                  ]
                },
                {
                  "id": "initialize_changes_dict",
                  "type": "assignment",
                  "description": "initialize empty changes_dict list",
                  "line_range": [
                    263,
                    263
                  ]
                },
                {
                  "id": "convert_changes_to_dict",
                  "type": "for_loop",
                  "description": "iterate through changes, convert each to dictionary using asdict, convert line_range tuples to lists if present, append to changes_dict",
                  "line_range": [
                    264,
                    269
                  ]
                },
                {
                  "id": "build_result_dict",
                  "type": "assignment",
                  "description": "create result dictionary with file paths, ast_file, total_changes count, changes array, and metadata",
                  "line_range": [
                    271,
                    280
                  ]
                },
                {
                  "id": "return_json",
                  "type": "return_statement",
                  "description": "return JSON string with 2-space indentation",
                  "line_range": [
                    282,
                    282
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": "function_main",
          "type": "function_definition",
          "signature": "function main()",
          "children": [
            {
              "id": "setup_argument_parser",
              "type": "argument_parser_setup",
              "description": "create ArgumentParser with description and add arguments for ast_json, file1, file2, and optional output file",
              "line_range": [
                285,
                289
              ]
            },
            {
              "id": "parse_args",
              "type": "assignment",
              "description": "parse command line arguments",
              "line_range": [
                291,
                291
              ]
            },
            {
              "id": "create_analyzer_and_analyze",
              "type": "analysis_workflow",
              "description": "create DiffAnalyzer instance, analyze changes, and convert to JSON format",
              "line_range": [
                294,
                298
              ]
            },
            {
              "id": "output_results",
              "type": "if_else_block",
              "description": "if output file specified: write JSON to file and print confirmation; else: print JSON to stdout",
              "line_range": [
                300,
                305
              ]
            }
          ]
        },
        {
          "id": "main_guard",
          "type": "if_statement",
          "description": "if run as main script, call main() function",
          "line_range": [
            307,
            308
          ]
        }
      ]
    }
  },
  "metadata": {
    "source_py": "/Users/krishnapagrut/Developer/hcli/diff_analyzer.py"
  }
}