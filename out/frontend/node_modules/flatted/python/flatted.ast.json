{
  "metadata": {
    "original_file": "/Users/krishnapagrut/Developer/hcli/frontend/node_modules/flatted/python/flatted.py",
    "total_chunks": 52,
    "chunking_method": "ast_semantic",
    "timestamp": "2025-09-14T08:12:39.614151"
  },
  "chunks": {
    "main": {
      "id": "main",
      "type": "module",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "import json as _json"
          ],
          "line_range": [
            17,
            17
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "class__Known",
          "line_range": [
            19,
            22
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "class__String",
          "line_range": [
            24,
            26
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function__array_keys",
          "line_range": [
            29,
            35
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function__object_keys",
          "line_range": [
            37,
            41
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function__is_array",
          "line_range": [
            43,
            44
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function__is_object",
          "line_range": [
            46,
            47
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function__is_string",
          "line_range": [
            49,
            50
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function__index",
          "line_range": [
            52,
            57
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function__loop",
          "line_range": [
            59,
            65
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function__ref",
          "line_range": [
            67,
            75
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function__relate",
          "line_range": [
            77,
            84
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function__transform",
          "line_range": [
            86,
            99
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function__wrap",
          "line_range": [
            101,
            115
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function_parse",
          "line_range": [
            117,
            138
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function_stringify",
          "line_range": [
            141,
            149
          ]
        }
      ],
      "parent_scope": null
    },
    "class__Known": {
      "id": "class__Known",
      "type": "class_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "class _Known:"
          ],
          "line_range": [
            19,
            19
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "_Known___init__",
          "line_range": [
            20,
            22
          ]
        }
      ],
      "parent_scope": "main"
    },
    "_Known___init__": {
      "id": "_Known___init__",
      "type": "method_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def __init__(self) -> None:"
          ],
          "line_range": [
            20,
            20
          ]
        },
        {
          "type": "code",
          "content": [
            "self.key = []"
          ],
          "line_range": [
            21,
            21
          ]
        },
        {
          "type": "code",
          "content": [
            "self.value = []"
          ],
          "line_range": [
            22,
            22
          ]
        }
      ],
      "parent_scope": "class__Known"
    },
    "class__String": {
      "id": "class__String",
      "type": "class_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "class _String:"
          ],
          "line_range": [
            24,
            24
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "_String___init__",
          "line_range": [
            25,
            26
          ]
        }
      ],
      "parent_scope": "main"
    },
    "_String___init__": {
      "id": "_String___init__",
      "type": "method_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def __init__(self, value) -> None:"
          ],
          "line_range": [
            25,
            25
          ]
        },
        {
          "type": "code",
          "content": [
            "self.value = value"
          ],
          "line_range": [
            26,
            26
          ]
        }
      ],
      "parent_scope": "class__String"
    },
    "function__array_keys": {
      "id": "function__array_keys",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def _array_keys(value) -> None:"
          ],
          "line_range": [
            29,
            29
          ]
        },
        {
          "type": "code",
          "content": [
            "keys = []"
          ],
          "line_range": [
            30,
            30
          ]
        },
        {
          "type": "code",
          "content": [
            "i = 0"
          ],
          "line_range": [
            31,
            31
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "for1_loop",
          "line_range": [
            32,
            34
          ]
        },
        {
          "type": "code",
          "content": [
            "return keys"
          ],
          "line_range": [
            35,
            35
          ]
        }
      ],
      "parent_scope": "main"
    },
    "for1_loop": {
      "id": "for1_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for _ in value:"
          ],
          "line_range": [
            32,
            32
          ]
        },
        {
          "type": "code",
          "content": [
            "keys.append(i)"
          ],
          "line_range": [
            33,
            33
          ]
        },
        {
          "type": "code",
          "content": [
            "i += 1"
          ],
          "line_range": [
            34,
            34
          ]
        }
      ],
      "parent_scope": "function__array_keys"
    },
    "function__object_keys": {
      "id": "function__object_keys",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def _object_keys(value) -> None:"
          ],
          "line_range": [
            37,
            37
          ]
        },
        {
          "type": "code",
          "content": [
            "keys = []"
          ],
          "line_range": [
            38,
            38
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "for2_loop",
          "line_range": [
            39,
            40
          ]
        },
        {
          "type": "code",
          "content": [
            "return keys"
          ],
          "line_range": [
            41,
            41
          ]
        }
      ],
      "parent_scope": "main"
    },
    "for2_loop": {
      "id": "for2_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for key in value:"
          ],
          "line_range": [
            39,
            39
          ]
        },
        {
          "type": "code",
          "content": [
            "keys.append(key)"
          ],
          "line_range": [
            40,
            40
          ]
        }
      ],
      "parent_scope": "function__object_keys"
    },
    "function__is_array": {
      "id": "function__is_array",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def _is_array(value) -> None:"
          ],
          "line_range": [
            43,
            43
          ]
        },
        {
          "type": "code",
          "content": [
            "return isinstance(value, (list, tuple))"
          ],
          "line_range": [
            44,
            44
          ]
        }
      ],
      "parent_scope": "main"
    },
    "function__is_object": {
      "id": "function__is_object",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def _is_object(value) -> None:"
          ],
          "line_range": [
            46,
            46
          ]
        },
        {
          "type": "code",
          "content": [
            "return isinstance(value, dict)"
          ],
          "line_range": [
            47,
            47
          ]
        }
      ],
      "parent_scope": "main"
    },
    "function__is_string": {
      "id": "function__is_string",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def _is_string(value) -> None:"
          ],
          "line_range": [
            49,
            49
          ]
        },
        {
          "type": "code",
          "content": [
            "return isinstance(value, str)"
          ],
          "line_range": [
            50,
            50
          ]
        }
      ],
      "parent_scope": "main"
    },
    "function__index": {
      "id": "function__index",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def _index(known, input, value) -> None:"
          ],
          "line_range": [
            52,
            52
          ]
        },
        {
          "type": "code",
          "content": [
            "input.append(value)"
          ],
          "line_range": [
            53,
            53
          ]
        },
        {
          "type": "code",
          "content": [
            "index = str(len(input) - 1)"
          ],
          "line_range": [
            54,
            54
          ]
        },
        {
          "type": "code",
          "content": [
            "known.key.append(value)"
          ],
          "line_range": [
            55,
            55
          ]
        },
        {
          "type": "code",
          "content": [
            "known.value.append(index)"
          ],
          "line_range": [
            56,
            56
          ]
        },
        {
          "type": "code",
          "content": [
            "return index"
          ],
          "line_range": [
            57,
            57
          ]
        }
      ],
      "parent_scope": "main"
    },
    "function__loop": {
      "id": "function__loop",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def _loop(keys, input, known, output) -> None:"
          ],
          "line_range": [
            59,
            59
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "for3_loop",
          "line_range": [
            60,
            63
          ]
        },
        {
          "type": "code",
          "content": [
            "return output"
          ],
          "line_range": [
            65,
            65
          ]
        }
      ],
      "parent_scope": "main"
    },
    "for3_loop": {
      "id": "for3_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for key in keys:"
          ],
          "line_range": [
            60,
            60
          ]
        },
        {
          "type": "code",
          "content": [
            "value = output[key]"
          ],
          "line_range": [
            61,
            61
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if1_block",
          "line_range": [
            62,
            63
          ]
        }
      ],
      "parent_scope": "function__loop"
    },
    "if1_block": {
      "id": "if1_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if1"
        }
      ],
      "parent_scope": "for3_loop"
    },
    "if1": {
      "id": "if1",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if isinstance(value, _String):",
            "_ref(key, input[int(value.value)], input, known, output)"
          ],
          "line_range": [
            62,
            63
          ]
        }
      ],
      "parent_scope": "if1_block"
    },
    "function__ref": {
      "id": "function__ref",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def _ref(key, value, input, known, output) -> None:"
          ],
          "line_range": [
            67,
            67
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if2_block",
          "line_range": [
            68,
            73
          ]
        },
        {
          "type": "code",
          "content": [
            "output[key] = value"
          ],
          "line_range": [
            75,
            75
          ]
        }
      ],
      "parent_scope": "main"
    },
    "if2_block": {
      "id": "if2_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if2"
        },
        {
          "type": "chunk_ref",
          "chunk_id": "elif1"
        }
      ],
      "parent_scope": "function__ref"
    },
    "if2": {
      "id": "if2",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if _is_array(value) and value not in known:",
            "known.append(value)",
            "value = _loop(_array_keys(value), input, known, value)",
            "elif _is_object(value) and value not in known:",
            "known.append(value)",
            "value = _loop(_object_keys(value), input, known, value)"
          ],
          "line_range": [
            68,
            70
          ]
        }
      ],
      "parent_scope": "if2_block"
    },
    "elif1": {
      "id": "elif1",
      "type": "elif_statement",
      "code_blocks": [],
      "parent_scope": "if2_block"
    },
    "function__relate": {
      "id": "function__relate",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def _relate(known, input, value) -> None:"
          ],
          "line_range": [
            77,
            77
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if3_block",
          "line_range": [
            78,
            82
          ]
        },
        {
          "type": "code",
          "content": [
            "return value"
          ],
          "line_range": [
            84,
            84
          ]
        }
      ],
      "parent_scope": "main"
    },
    "if3_block": {
      "id": "if3_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if3"
        }
      ],
      "parent_scope": "function__relate"
    },
    "if3": {
      "id": "if3",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if _is_string(value) or _is_array(value) or _is_object(value):",
            "try:",
            "return known.value[known.key.index(value)]",
            "except:",
            "return _index(known, input, value)"
          ],
          "line_range": [
            78,
            82
          ]
        }
      ],
      "parent_scope": "if3_block"
    },
    "try1_block": {
      "id": "try1_block",
      "type": "try_statement",
      "code_blocks": [],
      "parent_scope": "if3"
    },
    "function__transform": {
      "id": "function__transform",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def _transform(known, input, value) -> None:"
          ],
          "line_range": [
            86,
            86
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if4_block",
          "line_range": [
            87,
            91
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if5_block",
          "line_range": [
            93,
            97
          ]
        },
        {
          "type": "code",
          "content": [
            "return value"
          ],
          "line_range": [
            99,
            99
          ]
        }
      ],
      "parent_scope": "main"
    },
    "if4_block": {
      "id": "if4_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if4"
        }
      ],
      "parent_scope": "function__transform"
    },
    "if4": {
      "id": "if4",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if _is_array(value):",
            "output = []",
            "for val in value:",
            "output.append(_relate(known, input, val))",
            "return output"
          ],
          "line_range": [
            87,
            91
          ]
        }
      ],
      "parent_scope": "if4_block"
    },
    "for4_loop": {
      "id": "for4_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for val in value:"
          ],
          "line_range": [
            89,
            89
          ]
        },
        {
          "type": "code",
          "content": [
            "output.append(_relate(known, input, val))"
          ],
          "line_range": [
            90,
            90
          ]
        }
      ],
      "parent_scope": "if4"
    },
    "if5_block": {
      "id": "if5_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if5"
        }
      ],
      "parent_scope": "function__transform"
    },
    "if5": {
      "id": "if5",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if _is_object(value):",
            "obj = {}",
            "for key in value:",
            "obj[key] = _relate(known, input, value[key])",
            "return obj"
          ],
          "line_range": [
            93,
            97
          ]
        }
      ],
      "parent_scope": "if5_block"
    },
    "for5_loop": {
      "id": "for5_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for key in value:"
          ],
          "line_range": [
            95,
            95
          ]
        },
        {
          "type": "code",
          "content": [
            "obj[key] = _relate(known, input, value[key])"
          ],
          "line_range": [
            96,
            96
          ]
        }
      ],
      "parent_scope": "if5"
    },
    "function__wrap": {
      "id": "function__wrap",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def _wrap(value) -> None:"
          ],
          "line_range": [
            101,
            101
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if6_block",
          "line_range": [
            102,
            103
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if7_block",
          "line_range": [
            105,
            113
          ]
        },
        {
          "type": "code",
          "content": [
            "return value"
          ],
          "line_range": [
            115,
            115
          ]
        }
      ],
      "parent_scope": "main"
    },
    "if6_block": {
      "id": "if6_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if6"
        }
      ],
      "parent_scope": "function__wrap"
    },
    "if6": {
      "id": "if6",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if _is_string(value):",
            "return _String(value)"
          ],
          "line_range": [
            102,
            103
          ]
        }
      ],
      "parent_scope": "if6_block"
    },
    "if7_block": {
      "id": "if7_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if7"
        },
        {
          "type": "chunk_ref",
          "chunk_id": "elif1"
        }
      ],
      "parent_scope": "function__wrap"
    },
    "if7": {
      "id": "if7",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if _is_array(value):",
            "i = 0",
            "for val in value:",
            "value[i] = _wrap(val)",
            "i += 1",
            "",
            "elif _is_object(value):",
            "for key in value:",
            "value[key] = _wrap(value[key])"
          ],
          "line_range": [
            105,
            109
          ]
        }
      ],
      "parent_scope": "if7_block"
    },
    "for6_loop": {
      "id": "for6_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for val in value:"
          ],
          "line_range": [
            107,
            107
          ]
        },
        {
          "type": "code",
          "content": [
            "value[i] = _wrap(val)"
          ],
          "line_range": [
            108,
            108
          ]
        },
        {
          "type": "code",
          "content": [
            "i += 1"
          ],
          "line_range": [
            109,
            109
          ]
        }
      ],
      "parent_scope": "if7"
    },
    "elif2": {
      "id": "elif2",
      "type": "elif_statement",
      "code_blocks": [],
      "parent_scope": "if7_block"
    },
    "for7_loop": {
      "id": "for7_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for key in value:"
          ],
          "line_range": [
            112,
            112
          ]
        },
        {
          "type": "code",
          "content": [
            "value[key] = _wrap(value[key])"
          ],
          "line_range": [
            113,
            113
          ]
        }
      ],
      "parent_scope": "elif2"
    },
    "function_parse": {
      "id": "function_parse",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def parse(value) -> None:"
          ],
          "line_range": [
            117,
            117
          ]
        },
        {
          "type": "code",
          "content": [
            "json = _json.loads(value, *args, **kwargs)"
          ],
          "line_range": [
            118,
            118
          ]
        },
        {
          "type": "code",
          "content": [
            "wrapped = []"
          ],
          "line_range": [
            119,
            119
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "for8_loop",
          "line_range": [
            120,
            121
          ]
        },
        {
          "type": "code",
          "content": [
            "input = []"
          ],
          "line_range": [
            123,
            123
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "for9_loop",
          "line_range": [
            124,
            128
          ]
        },
        {
          "type": "code",
          "content": [
            "value = input[0]"
          ],
          "line_range": [
            130,
            130
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if9_block",
          "line_range": [
            132,
            133
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if10_block",
          "line_range": [
            135,
            136
          ]
        },
        {
          "type": "code",
          "content": [
            "return value"
          ],
          "line_range": [
            138,
            138
          ]
        }
      ],
      "parent_scope": "main"
    },
    "for8_loop": {
      "id": "for8_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for value in json:"
          ],
          "line_range": [
            120,
            120
          ]
        },
        {
          "type": "code",
          "content": [
            "wrapped.append(_wrap(value))"
          ],
          "line_range": [
            121,
            121
          ]
        }
      ],
      "parent_scope": "function_parse"
    },
    "for9_loop": {
      "id": "for9_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for value in wrapped:"
          ],
          "line_range": [
            124,
            124
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if8_block",
          "line_range": [
            125,
            128
          ]
        }
      ],
      "parent_scope": "function_parse"
    },
    "if8_block": {
      "id": "if8_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if8"
        },
        {
          "type": "chunk_ref",
          "chunk_id": "else8"
        }
      ],
      "parent_scope": "for9_loop"
    },
    "if8": {
      "id": "if8",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if isinstance(value, _String):",
            "input.append(value.value)",
            "else:",
            "input.append(value)"
          ],
          "line_range": [
            125,
            126
          ]
        }
      ],
      "parent_scope": "if8_block"
    },
    "else1": {
      "id": "else1",
      "type": "else_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "input.append(value)"
          ],
          "line_range": [
            128,
            128
          ]
        }
      ],
      "parent_scope": "if8_block"
    },
    "if9_block": {
      "id": "if9_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if9"
        }
      ],
      "parent_scope": "function_parse"
    },
    "if9": {
      "id": "if9",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if _is_array(value):",
            "return _loop(_array_keys(value), input, [value], value)"
          ],
          "line_range": [
            132,
            133
          ]
        }
      ],
      "parent_scope": "if9_block"
    },
    "if10_block": {
      "id": "if10_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if10"
        }
      ],
      "parent_scope": "function_parse"
    },
    "if10": {
      "id": "if10",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if _is_object(value):",
            "return _loop(_object_keys(value), input, [value], value)"
          ],
          "line_range": [
            135,
            136
          ]
        }
      ],
      "parent_scope": "if10_block"
    },
    "function_stringify": {
      "id": "function_stringify",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def stringify(value) -> None:"
          ],
          "line_range": [
            141,
            141
          ]
        },
        {
          "type": "code",
          "content": [
            "known = _Known()"
          ],
          "line_range": [
            142,
            142
          ]
        },
        {
          "type": "code",
          "content": [
            "input = []"
          ],
          "line_range": [
            143,
            143
          ]
        },
        {
          "type": "code",
          "content": [
            "output = []"
          ],
          "line_range": [
            144,
            144
          ]
        },
        {
          "type": "code",
          "content": [
            "i = int(_index(known, input, value))"
          ],
          "line_range": [
            145,
            145
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "while1_loop",
          "line_range": [
            146,
            148
          ]
        },
        {
          "type": "code",
          "content": [
            "return _json.dumps(output, *args, **kwargs)"
          ],
          "line_range": [
            149,
            149
          ]
        }
      ],
      "parent_scope": "main"
    },
    "while1_loop": {
      "id": "while1_loop",
      "type": "while_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "while i < len(input):",
            "output.append(_transform(known, input, input[i]))",
            "i += 1"
          ],
          "line_range": [
            146,
            148
          ]
        }
      ],
      "parent_scope": "function_stringify"
    }
  },
  "relationships": {
    "execution_flow": [
      "main"
    ],
    "dependency_graph": {}
  },
  "context_map": {
    "global_imports": [],
    "global_variables": [],
    "functions": [],
    "classes": []
  }
}