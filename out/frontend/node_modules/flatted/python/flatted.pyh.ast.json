{
  "phy_chunks": {
    "main": {
      "id": "main",
      "type": "module",
      "children": [
        {
          "id": "import_json",
          "type": "import_statement",
          "description": "import json module as _json",
          "line_range": [
            17,
            17
          ]
        },
        {
          "id": "class__Known",
          "type": "class_definition",
          "name": "_Known",
          "children": [
            {
              "id": "_Known___init__",
              "type": "method_definition",
              "signature": "__init__(self)",
              "description": "initialize empty key and value lists",
              "line_range": [
                20,
                22
              ]
            }
          ]
        },
        {
          "id": "class__String",
          "type": "class_definition",
          "name": "_String",
          "children": [
            {
              "id": "_String___init__",
              "type": "method_definition",
              "signature": "__init__(self, value)",
              "description": "store the provided value",
              "line_range": [
                25,
                26
              ]
            }
          ]
        },
        {
          "id": "function__array_keys",
          "type": "function_definition",
          "signature": "_array_keys(value)",
          "children": [
            {
              "id": "initialize_keys_and_index",
              "type": "assignment",
              "description": "initialize empty keys list and index counter i starting at 0",
              "line_range": [
                30,
                31
              ]
            },
            {
              "id": "for1_loop_abstract",
              "type": "for_loop",
              "description": "for each element in value, append current index i to keys list and increment i",
              "line_range": [
                32,
                34
              ]
            },
            {
              "id": "return_keys",
              "type": "return_statement",
              "description": "return the keys list",
              "line_range": [
                35,
                35
              ]
            }
          ]
        },
        {
          "id": "function__object_keys",
          "type": "function_definition",
          "signature": "_object_keys(value)",
          "children": [
            {
              "id": "initialize_keys_list",
              "type": "assignment",
              "description": "initialize empty keys list",
              "line_range": [
                38,
                38
              ]
            },
            {
              "id": "for2_loop_abstract",
              "type": "for_loop",
              "description": "for each key in value dictionary, append key to keys list",
              "line_range": [
                39,
                40
              ]
            },
            {
              "id": "return_keys_list",
              "type": "return_statement",
              "description": "return the keys list",
              "line_range": [
                41,
                41
              ]
            }
          ]
        },
        {
          "id": "function__is_array",
          "type": "function_definition",
          "signature": "_is_array(value)",
          "description": "check if value is a list or tuple instance",
          "line_range": [
            43,
            44
          ]
        },
        {
          "id": "function__is_object",
          "type": "function_definition",
          "signature": "_is_object(value)",
          "description": "check if value is a dictionary instance",
          "line_range": [
            46,
            47
          ]
        },
        {
          "id": "function__is_string",
          "type": "function_definition",
          "signature": "_is_string(value)",
          "description": "check if value is a string instance",
          "line_range": [
            49,
            50
          ]
        },
        {
          "id": "function__index",
          "type": "function_definition",
          "signature": "_index(known, input, value)",
          "description": "append value to input, calculate index as string of position, store in known's key/value pairs, and return the index",
          "line_range": [
            52,
            57
          ]
        },
        {
          "id": "function__loop",
          "type": "function_definition",
          "signature": "_loop(keys, input, known, output)",
          "children": [
            {
              "id": "for3_loop_abstract",
              "type": "for_loop",
              "children": [
                {
                  "id": "get_value_from_output",
                  "type": "assignment",
                  "description": "get value from output at current key",
                  "line_range": [
                    61,
                    61
                  ]
                },
                {
                  "id": "if1_abstract",
                  "type": "if_statement",
                  "description": "if value is a _String instance, call _ref with the dereferenced value from input",
                  "line_range": [
                    62,
                    63
                  ]
                }
              ]
            },
            {
              "id": "return_output",
              "type": "return_statement",
              "description": "return the output",
              "line_range": [
                65,
                65
              ]
            }
          ]
        },
        {
          "id": "function__ref",
          "type": "function_definition",
          "signature": "_ref(key, value, input, known, output)",
          "children": [
            {
              "id": "if2_block_abstract",
              "type": "if_else_block",
              "description": "if value is array/object and not already known, add to known and recursively loop through its keys; handle both array and object cases",
              "line_range": [
                68,
                73
              ]
            },
            {
              "id": "assign_to_output",
              "type": "assignment",
              "description": "assign the processed value to output at the given key",
              "line_range": [
                75,
                75
              ]
            }
          ]
        },
        {
          "id": "function__relate",
          "type": "function_definition",
          "signature": "_relate(known, input, value)",
          "children": [
            {
              "id": "if3_abstract",
              "type": "if_statement",
              "description": "if value is string/array/object, try to find existing index in known or create new index",
              "line_range": [
                78,
                82
              ]
            },
            {
              "id": "return_value_relate",
              "type": "return_statement",
              "description": "return the value",
              "line_range": [
                84,
                84
              ]
            }
          ]
        },
        {
          "id": "function__transform",
          "type": "function_definition",
          "signature": "_transform(known, input, value)",
          "children": [
            {
              "id": "if4_array_transform",
              "type": "if_statement",
              "description": "if value is array, create new output list and relate each element",
              "line_range": [
                87,
                91
              ]
            },
            {
              "id": "if5_object_transform",
              "type": "if_statement",
              "description": "if value is object, create new object and relate each key-value pair",
              "line_range": [
                93,
                97
              ]
            },
            {
              "id": "return_value_transform",
              "type": "return_statement",
              "description": "return the value",
              "line_range": [
                99,
                99
              ]
            }
          ]
        },
        {
          "id": "function__wrap",
          "type": "function_definition",
          "signature": "_wrap(value)",
          "children": [
            {
              "id": "if6_string_wrap",
              "type": "if_statement",
              "description": "if value is string, return wrapped in _String class",
              "line_range": [
                102,
                103
              ]
            },
            {
              "id": "if7_block_complex_wrap",
              "type": "if_else_block",
              "description": "if value is array, recursively wrap each element with index tracking; if object, recursively wrap each value",
              "line_range": [
                105,
                113
              ]
            },
            {
              "id": "return_value_wrap",
              "type": "return_statement",
              "description": "return the value",
              "line_range": [
                115,
                115
              ]
            }
          ]
        },
        {
          "id": "function_parse",
          "type": "function_definition",
          "signature": "parse(value)",
          "children": [
            {
              "id": "load_and_wrap_json",
              "type": "assignment",
              "description": "load JSON and wrap each element, storing in wrapped list",
              "line_range": [
                118,
                121
              ]
            },
            {
              "id": "build_input_array",
              "type": "assignment",
              "description": "create input array by extracting values from wrapped elements, handling _String instances specially",
              "line_range": [
                123,
                128
              ]
            },
            {
              "id": "get_first_value",
              "type": "assignment",
              "description": "get the first value from input array",
              "line_range": [
                130,
                130
              ]
            },
            {
              "id": "process_array_or_object",
              "type": "if_statement",
              "description": "if first value is array or object, loop through its keys and return processed result",
              "line_range": [
                132,
                136
              ]
            },
            {
              "id": "return_parsed_value",
              "type": "return_statement",
              "description": "return the parsed value",
              "line_range": [
                138,
                138
              ]
            }
          ]
        },
        {
          "id": "function_stringify",
          "type": "function_definition",
          "signature": "stringify(value)",
          "children": [
            {
              "id": "initialize_stringify_vars",
              "type": "assignment",
              "description": "initialize known tracker, input/output arrays, and get starting index",
              "line_range": [
                142,
                145
              ]
            },
            {
              "id": "while1_loop_abstract",
              "type": "while_loop",
              "description": "while there are more items in input, transform each item and add to output, incrementing index",
              "line_range": [
                146,
                148
              ]
            },
            {
              "id": "return_json_dumps",
              "type": "return_statement",
              "description": "return JSON serialized output",
              "line_range": [
                149,
                149
              ]
            }
          ]
        }
      ]
    }
  },
  "metadata": {
    "source_py": "/Users/krishnapagrut/Developer/hcli/frontend/node_modules/flatted/python/flatted.py"
  }
}