{
  "metadata": {
    "original_file": "/Users/krishnapagrut/Developer/hcli/test_api.py",
    "total_chunks": 43,
    "chunking_method": "ast_semantic",
    "timestamp": "2025-09-14T08:11:03.463585"
  },
  "chunks": {
    "main": {
      "id": "main",
      "type": "module",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "\"\"\"",
            "Test script for the HCLI Backend API",
            "Tests all endpoints to ensure they work correctly.",
            "\"\"\""
          ],
          "line_range": [
            1,
            4
          ]
        },
        {
          "type": "code",
          "content": [
            "import asyncio"
          ],
          "line_range": [
            6,
            6
          ]
        },
        {
          "type": "code",
          "content": [
            "import json"
          ],
          "line_range": [
            7,
            7
          ]
        },
        {
          "type": "code",
          "content": [
            "import requests"
          ],
          "line_range": [
            8,
            8
          ]
        },
        {
          "type": "code",
          "content": [
            "import time"
          ],
          "line_range": [
            9,
            9
          ]
        },
        {
          "type": "code",
          "content": [
            "from pathlib import Path"
          ],
          "line_range": [
            10,
            10
          ]
        },
        {
          "type": "code",
          "content": [
            "API_BASE_URL = \"http://localhost:8000\""
          ],
          "line_range": [
            13,
            13
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function_test_health_check",
          "line_range": [
            16,
            27
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function_test_root_endpoint",
          "line_range": [
            30,
            41
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function_test_crawl_endpoint",
          "line_range": [
            44,
            64
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function_test_display_pyh_endpoint",
          "line_range": [
            67,
            92
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function_test_pyh_to_py_endpoint",
          "line_range": [
            95,
            143
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function_test_temp_files_endpoints",
          "line_range": [
            146,
            159
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function_main",
          "line_range": [
            162,
            180
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if11_block",
          "line_range": [
            183,
            184
          ]
        }
      ],
      "parent_scope": null
    },
    "function_test_health_check": {
      "id": "function_test_health_check",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def test_health_check() -> None:"
          ],
          "line_range": [
            16,
            16
          ]
        },
        {
          "type": "code",
          "content": [
            "\"\"\"Test the health check endpoint\"\"\""
          ],
          "line_range": [
            17,
            17
          ]
        },
        {
          "type": "code",
          "content": [
            "print(\"Testing health check...\")"
          ],
          "line_range": [
            18,
            18
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "try1_block",
          "line_range": [
            19,
            27
          ]
        }
      ],
      "parent_scope": "main"
    },
    "try1_block": {
      "id": "try1_block",
      "type": "try_statement",
      "code_blocks": [],
      "parent_scope": "function_test_health_check"
    },
    "if1_block": {
      "id": "if1_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if1"
        },
        {
          "type": "chunk_ref",
          "chunk_id": "else1"
        }
      ],
      "parent_scope": "try1_block"
    },
    "if1": {
      "id": "if1",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if response.status_code == 200:",
            "print(\"\u2705 Health check passed\")",
            "print(f\"   Response: {response.json()}\")",
            "else:",
            "print(f\"\u274c Health check failed: {response.status_code}\")"
          ],
          "line_range": [
            21,
            23
          ]
        }
      ],
      "parent_scope": "if1_block"
    },
    "else1": {
      "id": "else1",
      "type": "else_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "print(f\"\u274c Health check failed: {response.status_code}\")"
          ],
          "line_range": [
            25,
            25
          ]
        }
      ],
      "parent_scope": "if1_block"
    },
    "function_test_root_endpoint": {
      "id": "function_test_root_endpoint",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def test_root_endpoint() -> None:"
          ],
          "line_range": [
            30,
            30
          ]
        },
        {
          "type": "code",
          "content": [
            "\"\"\"Test the root endpoint\"\"\""
          ],
          "line_range": [
            31,
            31
          ]
        },
        {
          "type": "code",
          "content": [
            "print(\"\\nTesting root endpoint...\")"
          ],
          "line_range": [
            32,
            32
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "try2_block",
          "line_range": [
            33,
            41
          ]
        }
      ],
      "parent_scope": "main"
    },
    "try2_block": {
      "id": "try2_block",
      "type": "try_statement",
      "code_blocks": [],
      "parent_scope": "function_test_root_endpoint"
    },
    "if2_block": {
      "id": "if2_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if2"
        },
        {
          "type": "chunk_ref",
          "chunk_id": "else2"
        }
      ],
      "parent_scope": "try2_block"
    },
    "if2": {
      "id": "if2",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if response.status_code == 200:",
            "print(\"\u2705 Root endpoint passed\")",
            "print(f\"   Response: {response.json()}\")",
            "else:",
            "print(f\"\u274c Root endpoint failed: {response.status_code}\")"
          ],
          "line_range": [
            35,
            37
          ]
        }
      ],
      "parent_scope": "if2_block"
    },
    "else2": {
      "id": "else2",
      "type": "else_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "print(f\"\u274c Root endpoint failed: {response.status_code}\")"
          ],
          "line_range": [
            39,
            39
          ]
        }
      ],
      "parent_scope": "if2_block"
    },
    "function_test_crawl_endpoint": {
      "id": "function_test_crawl_endpoint",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def test_crawl_endpoint() -> None:"
          ],
          "line_range": [
            44,
            44
          ]
        },
        {
          "type": "code",
          "content": [
            "\"\"\"Test the crawl endpoint\"\"\""
          ],
          "line_range": [
            45,
            45
          ]
        },
        {
          "type": "code",
          "content": [
            "print(\"\\nTesting crawl endpoint...\")"
          ],
          "line_range": [
            46,
            46
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "try3_block",
          "line_range": [
            47,
            64
          ]
        }
      ],
      "parent_scope": "main"
    },
    "try3_block": {
      "id": "try3_block",
      "type": "try_statement",
      "code_blocks": [],
      "parent_scope": "function_test_crawl_endpoint"
    },
    "if3_block": {
      "id": "if3_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if3"
        },
        {
          "type": "chunk_ref",
          "chunk_id": "else3"
        }
      ],
      "parent_scope": "try3_block"
    },
    "if3": {
      "id": "if3",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if response.status_code == 200:",
            "print(\"\u2705 Crawl endpoint passed\")",
            "result = response.json()",
            "print(f\"   Processed files: {len(result['processed_files'])}\")",
            "print(f\"   Output directory: {result['output_dir']}\")",
            "else:",
            "print(f\"\u274c Crawl endpoint failed: {response.status_code}\")",
            "print(f\"   Error: {response.text}\")"
          ],
          "line_range": [
            55,
            59
          ]
        }
      ],
      "parent_scope": "if3_block"
    },
    "else3": {
      "id": "else3",
      "type": "else_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "print(f\"\u274c Crawl endpoint failed: {response.status_code}\")"
          ],
          "line_range": [
            61,
            61
          ]
        },
        {
          "type": "code",
          "content": [
            "print(f\"   Error: {response.text}\")"
          ],
          "line_range": [
            62,
            62
          ]
        }
      ],
      "parent_scope": "if3_block"
    },
    "function_test_display_pyh_endpoint": {
      "id": "function_test_display_pyh_endpoint",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def test_display_pyh_endpoint() -> None:"
          ],
          "line_range": [
            67,
            67
          ]
        },
        {
          "type": "code",
          "content": [
            "\"\"\"Test the display pyh endpoint\"\"\""
          ],
          "line_range": [
            68,
            68
          ]
        },
        {
          "type": "code",
          "content": [
            "print(\"\\nTesting display pyh endpoint...\")"
          ],
          "line_range": [
            69,
            69
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "try4_block",
          "line_range": [
            70,
            92
          ]
        }
      ],
      "parent_scope": "main"
    },
    "try4_block": {
      "id": "try4_block",
      "type": "try_statement",
      "code_blocks": [],
      "parent_scope": "function_test_display_pyh_endpoint"
    },
    "if4_block": {
      "id": "if4_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if4"
        }
      ],
      "parent_scope": "try4_block"
    },
    "if4": {
      "id": "if4",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if not pyh_files:",
            "print(\"\u26a0\ufe0f  No pyh files found, skipping display test\")",
            "return"
          ],
          "line_range": [
            73,
            75
          ]
        }
      ],
      "parent_scope": "if4_block"
    },
    "if5_block": {
      "id": "if5_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if5"
        },
        {
          "type": "chunk_ref",
          "chunk_id": "else5"
        }
      ],
      "parent_scope": "try4_block"
    },
    "if5": {
      "id": "if5",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if response.status_code == 200:",
            "print(\"\u2705 Display pyh endpoint passed\")",
            "result = response.json()",
            "print(f\"   File: {result['file_path']}\")",
            "print(f\"   Content length: {len(result['content'])} characters\")",
            "else:",
            "print(f\"\u274c Display pyh endpoint failed: {response.status_code}\")",
            "print(f\"   Error: {response.text}\")"
          ],
          "line_range": [
            83,
            87
          ]
        }
      ],
      "parent_scope": "if5_block"
    },
    "else4": {
      "id": "else4",
      "type": "else_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "print(f\"\u274c Display pyh endpoint failed: {response.status_code}\")"
          ],
          "line_range": [
            89,
            89
          ]
        },
        {
          "type": "code",
          "content": [
            "print(f\"   Error: {response.text}\")"
          ],
          "line_range": [
            90,
            90
          ]
        }
      ],
      "parent_scope": "if5_block"
    },
    "function_test_pyh_to_py_endpoint": {
      "id": "function_test_pyh_to_py_endpoint",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def test_pyh_to_py_endpoint() -> None:"
          ],
          "line_range": [
            95,
            95
          ]
        },
        {
          "type": "code",
          "content": [
            "\"\"\"Test the pyh to py endpoint\"\"\""
          ],
          "line_range": [
            96,
            96
          ]
        },
        {
          "type": "code",
          "content": [
            "print(\"\\nTesting pyh to py endpoint...\")"
          ],
          "line_range": [
            97,
            97
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "try5_block",
          "line_range": [
            98,
            143
          ]
        }
      ],
      "parent_scope": "main"
    },
    "try5_block": {
      "id": "try5_block",
      "type": "try_statement",
      "code_blocks": [],
      "parent_scope": "function_test_pyh_to_py_endpoint"
    },
    "if6_block": {
      "id": "if6_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if6"
        }
      ],
      "parent_scope": "try5_block"
    },
    "if6": {
      "id": "if6",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if not pyh_files:",
            "print(\"\u26a0\ufe0f  No pyh files found, skipping pyh-to-py test\")",
            "return"
          ],
          "line_range": [
            101,
            103
          ]
        }
      ],
      "parent_scope": "if6_block"
    },
    "for1_loop": {
      "id": "for1_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for py_file in py_files:"
          ],
          "line_range": [
            117,
            117
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if7_block",
          "line_range": [
            118,
            120
          ]
        }
      ],
      "parent_scope": "try5_block"
    },
    "if7_block": {
      "id": "if7_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if7"
        }
      ],
      "parent_scope": "for1_loop"
    },
    "if7": {
      "id": "if7",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if py_file.stem == pyh_file.stem.split('.')[0]:",
            "source_py_file = str(py_file)",
            "break"
          ],
          "line_range": [
            118,
            120
          ]
        }
      ],
      "parent_scope": "if7_block"
    },
    "if8_block": {
      "id": "if8_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if8"
        }
      ],
      "parent_scope": "try5_block"
    },
    "if8": {
      "id": "if8",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if not source_py_file:",
            "print(\"\u26a0\ufe0f  No corresponding Python file found, skipping pyh-to-py test\")",
            "return"
          ],
          "line_range": [
            122,
            124
          ]
        }
      ],
      "parent_scope": "if8_block"
    },
    "if9_block": {
      "id": "if9_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if9"
        },
        {
          "type": "chunk_ref",
          "chunk_id": "else9"
        }
      ],
      "parent_scope": "try5_block"
    },
    "if9": {
      "id": "if9",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if response.status_code == 200:",
            "print(\"\u2705 Pyh to py endpoint passed\")",
            "result = response.json()",
            "print(f\"   Changes applied: {result['changes_applied']}\")",
            "print(f\"   Modified files: {result['modified_files']}\")",
            "else:",
            "print(f\"\u274c Pyh to py endpoint failed: {response.status_code}\")",
            "print(f\"   Error: {response.text}\")"
          ],
          "line_range": [
            134,
            138
          ]
        }
      ],
      "parent_scope": "if9_block"
    },
    "else5": {
      "id": "else5",
      "type": "else_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "print(f\"\u274c Pyh to py endpoint failed: {response.status_code}\")"
          ],
          "line_range": [
            140,
            140
          ]
        },
        {
          "type": "code",
          "content": [
            "print(f\"   Error: {response.text}\")"
          ],
          "line_range": [
            141,
            141
          ]
        }
      ],
      "parent_scope": "if9_block"
    },
    "function_test_temp_files_endpoints": {
      "id": "function_test_temp_files_endpoints",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def test_temp_files_endpoints() -> None:"
          ],
          "line_range": [
            146,
            146
          ]
        },
        {
          "type": "code",
          "content": [
            "\"\"\"Test temporary files management endpoints\"\"\""
          ],
          "line_range": [
            147,
            147
          ]
        },
        {
          "type": "code",
          "content": [
            "print(\"\\nTesting temp files endpoints...\")"
          ],
          "line_range": [
            148,
            148
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "try6_block",
          "line_range": [
            149,
            159
          ]
        }
      ],
      "parent_scope": "main"
    },
    "try6_block": {
      "id": "try6_block",
      "type": "try_statement",
      "code_blocks": [],
      "parent_scope": "function_test_temp_files_endpoints"
    },
    "if10_block": {
      "id": "if10_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if10"
        },
        {
          "type": "chunk_ref",
          "chunk_id": "else10"
        }
      ],
      "parent_scope": "try6_block"
    },
    "if10": {
      "id": "if10",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if response.status_code == 200:",
            "print(\"\u2705 Temp files list endpoint passed\")",
            "result = response.json()",
            "print(f\"   Active sessions: {result['active_sessions']}\")",
            "else:",
            "print(f\"\u274c Temp files list endpoint failed: {response.status_code}\")"
          ],
          "line_range": [
            152,
            155
          ]
        }
      ],
      "parent_scope": "if10_block"
    },
    "else6": {
      "id": "else6",
      "type": "else_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "print(f\"\u274c Temp files list endpoint failed: {response.status_code}\")"
          ],
          "line_range": [
            157,
            157
          ]
        }
      ],
      "parent_scope": "if10_block"
    },
    "function_main": {
      "id": "function_main",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def main() -> None:"
          ],
          "line_range": [
            162,
            162
          ]
        },
        {
          "type": "code",
          "content": [
            "\"\"\"Run all tests\"\"\""
          ],
          "line_range": [
            163,
            163
          ]
        },
        {
          "type": "code",
          "content": [
            "print(\"HCLI Backend API Test Suite\")"
          ],
          "line_range": [
            164,
            164
          ]
        },
        {
          "type": "code",
          "content": [
            "print(\"=\" * 50)"
          ],
          "line_range": [
            165,
            165
          ]
        },
        {
          "type": "code",
          "content": [
            "print(\"Waiting for server to be ready...\")"
          ],
          "line_range": [
            168,
            168
          ]
        },
        {
          "type": "code",
          "content": [
            "time.sleep(2)"
          ],
          "line_range": [
            169,
            169
          ]
        },
        {
          "type": "code",
          "content": [
            "test_health_check()"
          ],
          "line_range": [
            172,
            172
          ]
        },
        {
          "type": "code",
          "content": [
            "test_root_endpoint()"
          ],
          "line_range": [
            173,
            173
          ]
        },
        {
          "type": "code",
          "content": [
            "test_crawl_endpoint()"
          ],
          "line_range": [
            174,
            174
          ]
        },
        {
          "type": "code",
          "content": [
            "print(\"\\n\" + \"=\" * 50)"
          ],
          "line_range": [
            179,
            179
          ]
        },
        {
          "type": "code",
          "content": [
            "print(\"Test suite completed!\")"
          ],
          "line_range": [
            180,
            180
          ]
        }
      ],
      "parent_scope": "main"
    },
    "if11_block": {
      "id": "if11_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if11"
        }
      ],
      "parent_scope": "main"
    },
    "if11": {
      "id": "if11",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if __name__ == \"__main__\":",
            "main()"
          ],
          "line_range": [
            183,
            184
          ]
        }
      ],
      "parent_scope": "if11_block"
    }
  },
  "relationships": {
    "execution_flow": [
      "main"
    ],
    "dependency_graph": {}
  },
  "context_map": {
    "global_imports": [],
    "global_variables": [],
    "functions": [],
    "classes": []
  }
}