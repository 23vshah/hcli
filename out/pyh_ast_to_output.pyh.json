{
  "phy_chunks": {
    "main": {
      "id": "main",
      "type": "module",
      "children": [
        {
          "id": "imports",
          "type": "imports",
          "description": "import json, argparse, and Path from pathlib",
          "line_range": [
            1,
            3
          ]
        },
        {
          "id": "function_render_node",
          "type": "function_definition",
          "signature": "function render_node(takes node and indent level)",
          "children": [
            {
              "id": "initialization",
              "type": "assignments",
              "description": "initialize empty lines list, padding string, and extract node properties (signature, description, line_range)",
              "line_range": [
                6,
                11
              ]
            },
            {
              "id": "line_info_setup",
              "type": "assignment",
              "description": "initialize empty line_info string",
              "line_range": [
                14,
                14
              ]
            },
            {
              "id": "if1_abstract",
              "type": "if_statement",
              "description": "if line_range exists, format it as a display string",
              "line_range": [
                15,
                16
              ]
            },
            {
              "id": "content_formatting",
              "type": "if_else_block",
              "description": "format and append node content: if signature exists, add it with line info and optionally add description indented; otherwise just add description with line info",
              "line_range": [
                19,
                24
              ]
            },
            {
              "id": "recursive_rendering",
              "type": "for_loop",
              "description": "recursively render all child nodes with increased indentation",
              "line_range": [
                27,
                28
              ]
            },
            {
              "id": "return_lines",
              "type": "return_statement",
              "description": "return the accumulated lines",
              "line_range": [
                30,
                30
              ]
            }
          ]
        },
        {
          "id": "function_phy_ast_to_output",
          "type": "function_definition",
          "signature": "function phy_ast_to_output(takes pyh_file and output_file paths)",
          "children": [
            {
              "id": "file_reading",
              "type": "assignment",
              "description": "read and strip text content from the pyh file",
              "line_range": [
                33,
                33
              ]
            },
            {
              "id": "markdown_cleanup",
              "type": "if_statement",
              "description": "if text starts with code block markers, remove all lines containing triple backticks",
              "line_range": [
                36,
                37
              ]
            },
            {
              "id": "json_parsing",
              "type": "assignment",
              "description": "parse the text as JSON",
              "line_range": [
                39,
                39
              ]
            },
            {
              "id": "validation",
              "type": "if_statement",
              "description": "validate that the JSON contains required phy_chunks.main structure, raise error if missing",
              "line_range": [
                41,
                42
              ]
            },
            {
              "id": "processing",
              "type": "assignments",
              "description": "extract the main root node and render it to a formatted string",
              "line_range": [
                44,
                45
              ]
            },
            {
              "id": "output_handling",
              "type": "if_else_block",
              "description": "if output_file is provided, write result to file and print confirmation; otherwise print result to console",
              "line_range": [
                47,
                51
              ]
            }
          ]
        },
        {
          "id": "main_execution",
          "type": "if_statement",
          "description": "when run as main: set up argument parser for pyh_file input and optional output file, then call phy_ast_to_output with parsed arguments",
          "line_range": [
            53,
            59
          ]
        }
      ]
    }
  },
  "metadata": {
    "source_py": "/Users/krishnapagrut/Developer/hcli/pyh_ast_to_output.py"
  }
}