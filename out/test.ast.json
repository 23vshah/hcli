{
  "metadata": {
    "original_file": "/Users/krishnapagrut/Developer/hcli/test.py",
    "total_chunks": 28,
    "chunking_method": "ast_semantic",
    "timestamp": "2025-09-14T01:52:51.304406"
  },
  "chunks": {
    "main": {
      "id": "main",
      "type": "module",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "import json"
          ],
          "line_range": [
            1,
            1
          ]
        },
        {
          "type": "code",
          "content": [
            "from typing import List, Dict, Optional"
          ],
          "line_range": [
            2,
            2
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "class_Task",
          "line_range": [
            5,
            34
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "class_TaskManager",
          "line_range": [
            37,
            73
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if4_block",
          "line_range": [
            76,
            107
          ]
        }
      ],
      "parent_scope": null
    },
    "class_Task": {
      "id": "class_Task",
      "type": "class_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "class Task:"
          ],
          "line_range": [
            5,
            5
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "Task___init__",
          "line_range": [
            6,
            10
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "Task_add_subtask",
          "line_range": [
            12,
            13
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "Task_mark_done",
          "line_range": [
            15,
            18
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "Task_to_dict",
          "line_range": [
            20,
            26
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "Task___str__",
          "line_range": [
            28,
            34
          ]
        }
      ],
      "parent_scope": "main"
    },
    "Task___init__": {
      "id": "Task___init__",
      "type": "method_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def __init__(self, title, description, done) -> None:"
          ],
          "line_range": [
            6,
            6
          ]
        },
        {
          "type": "code",
          "content": [
            "self.title = title"
          ],
          "line_range": [
            7,
            7
          ]
        },
        {
          "type": "code",
          "content": [
            "self.description = description"
          ],
          "line_range": [
            8,
            8
          ]
        },
        {
          "type": "code",
          "content": [
            "self.done = done"
          ],
          "line_range": [
            9,
            9
          ]
        },
        {
          "type": "code",
          "content": [
            "self.subtasks: List[\"Task\"] = []"
          ],
          "line_range": [
            10,
            10
          ]
        }
      ],
      "parent_scope": "class_Task"
    },
    "Task_add_subtask": {
      "id": "Task_add_subtask",
      "type": "method_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def add_subtask(self, subtask) -> ReturnType:"
          ],
          "line_range": [
            12,
            12
          ]
        },
        {
          "type": "code",
          "content": [
            "self.subtasks.append(subtask)"
          ],
          "line_range": [
            13,
            13
          ]
        }
      ],
      "parent_scope": "class_Task"
    },
    "Task_mark_done": {
      "id": "Task_mark_done",
      "type": "method_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def mark_done(self) -> ReturnType:"
          ],
          "line_range": [
            15,
            15
          ]
        },
        {
          "type": "code",
          "content": [
            "self.done = True"
          ],
          "line_range": [
            16,
            16
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "for1_loop",
          "line_range": [
            17,
            18
          ]
        }
      ],
      "parent_scope": "class_Task"
    },
    "for1_loop": {
      "id": "for1_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for sub in self.subtasks:"
          ],
          "line_range": [
            17,
            17
          ]
        },
        {
          "type": "code",
          "content": [
            "sub.mark_done()"
          ],
          "line_range": [
            18,
            18
          ]
        }
      ],
      "parent_scope": "Task_mark_done"
    },
    "Task_to_dict": {
      "id": "Task_to_dict",
      "type": "method_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def to_dict(self) -> ReturnType:"
          ],
          "line_range": [
            20,
            20
          ]
        },
        {
          "type": "code",
          "content": [
            "return {",
            "\"title\": self.title,",
            "\"description\": self.description,",
            "\"done\": self.done,",
            "\"subtasks\": [sub.to_dict() for sub in self.subtasks],",
            "}"
          ],
          "line_range": [
            21,
            26
          ]
        }
      ],
      "parent_scope": "class_Task"
    },
    "Task___str__": {
      "id": "Task___str__",
      "type": "method_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def __str__(self, level) -> ReturnType:"
          ],
          "line_range": [
            28,
            28
          ]
        },
        {
          "type": "code",
          "content": [
            "indent = \"  \" * level"
          ],
          "line_range": [
            29,
            29
          ]
        },
        {
          "type": "code",
          "content": [
            "status = \"[x]\" if self.done else \"[ ]\""
          ],
          "line_range": [
            30,
            30
          ]
        },
        {
          "type": "code",
          "content": [
            "result = f\"{indent}{status} {self.title} - {self.description}\\n\""
          ],
          "line_range": [
            31,
            31
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "for2_loop",
          "line_range": [
            32,
            33
          ]
        },
        {
          "type": "code",
          "content": [
            "return result"
          ],
          "line_range": [
            34,
            34
          ]
        }
      ],
      "parent_scope": "class_Task"
    },
    "for2_loop": {
      "id": "for2_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for sub in self.subtasks:"
          ],
          "line_range": [
            32,
            32
          ]
        },
        {
          "type": "code",
          "content": [
            "result += sub.__str__(level + 1)"
          ],
          "line_range": [
            33,
            33
          ]
        }
      ],
      "parent_scope": "Task___str__"
    },
    "class_TaskManager": {
      "id": "class_TaskManager",
      "type": "class_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "class TaskManager:"
          ],
          "line_range": [
            37,
            37
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "TaskManager___init__",
          "line_range": [
            38,
            39
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "TaskManager_add_task",
          "line_range": [
            41,
            44
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "TaskManager_find_task",
          "line_range": [
            46,
            56
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "TaskManager_mark_done",
          "line_range": [
            58,
            63
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "TaskManager_export_to_json",
          "line_range": [
            65,
            67
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "TaskManager___str__",
          "line_range": [
            69,
            73
          ]
        }
      ],
      "parent_scope": "main"
    },
    "TaskManager___init__": {
      "id": "TaskManager___init__",
      "type": "method_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def __init__(self) -> None:"
          ],
          "line_range": [
            38,
            38
          ]
        },
        {
          "type": "code",
          "content": [
            "self.tasks: List[Task] = []"
          ],
          "line_range": [
            39,
            39
          ]
        }
      ],
      "parent_scope": "class_TaskManager"
    },
    "TaskManager_add_task": {
      "id": "TaskManager_add_task",
      "type": "method_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def add_task(self, title, description) -> ReturnType:"
          ],
          "line_range": [
            41,
            41
          ]
        },
        {
          "type": "code",
          "content": [
            "task = Task(title, description)"
          ],
          "line_range": [
            42,
            42
          ]
        },
        {
          "type": "code",
          "content": [
            "self.tasks.append(task)"
          ],
          "line_range": [
            43,
            43
          ]
        },
        {
          "type": "code",
          "content": [
            "return task"
          ],
          "line_range": [
            44,
            44
          ]
        }
      ],
      "parent_scope": "class_TaskManager"
    },
    "TaskManager_find_task": {
      "id": "TaskManager_find_task",
      "type": "method_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def find_task(self, title) -> ReturnType:"
          ],
          "line_range": [
            46,
            46
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function__find",
          "line_range": [
            47,
            54
          ]
        },
        {
          "type": "code",
          "content": [
            "return _find(self.tasks)"
          ],
          "line_range": [
            56,
            56
          ]
        }
      ],
      "parent_scope": "class_TaskManager"
    },
    "function__find": {
      "id": "function__find",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def _find(task_list) -> ReturnType:"
          ],
          "line_range": [
            47,
            47
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "for3_loop",
          "line_range": [
            48,
            53
          ]
        },
        {
          "type": "code",
          "content": [
            "return None"
          ],
          "line_range": [
            54,
            54
          ]
        }
      ],
      "parent_scope": "TaskManager_find_task"
    },
    "for3_loop": {
      "id": "for3_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for t in task_list:"
          ],
          "line_range": [
            48,
            48
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if1_block",
          "line_range": [
            49,
            50
          ]
        },
        {
          "type": "code",
          "content": [
            "result = _find(t.subtasks)"
          ],
          "line_range": [
            51,
            51
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if2_block",
          "line_range": [
            52,
            53
          ]
        }
      ],
      "parent_scope": "function__find"
    },
    "if1_block": {
      "id": "if1_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if1"
        }
      ],
      "parent_scope": "for3_loop"
    },
    "if1": {
      "id": "if1",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if t.title == title:",
            "return t"
          ],
          "line_range": [
            49,
            50
          ]
        }
      ],
      "parent_scope": "if1_block"
    },
    "if2_block": {
      "id": "if2_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if2"
        }
      ],
      "parent_scope": "for3_loop"
    },
    "if2": {
      "id": "if2",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if result:",
            "return result"
          ],
          "line_range": [
            52,
            53
          ]
        }
      ],
      "parent_scope": "if2_block"
    },
    "TaskManager_mark_done": {
      "id": "TaskManager_mark_done",
      "type": "method_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def mark_done(self, title) -> ReturnType:"
          ],
          "line_range": [
            58,
            58
          ]
        },
        {
          "type": "code",
          "content": [
            "task = self.find_task(title)"
          ],
          "line_range": [
            59,
            59
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if3_block",
          "line_range": [
            60,
            62
          ]
        },
        {
          "type": "code",
          "content": [
            "return False"
          ],
          "line_range": [
            63,
            63
          ]
        }
      ],
      "parent_scope": "class_TaskManager"
    },
    "if3_block": {
      "id": "if3_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if3"
        }
      ],
      "parent_scope": "TaskManager_mark_done"
    },
    "if3": {
      "id": "if3",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if task:",
            "task.mark_done()",
            "return True"
          ],
          "line_range": [
            60,
            62
          ]
        }
      ],
      "parent_scope": "if3_block"
    },
    "TaskManager_export_to_json": {
      "id": "TaskManager_export_to_json",
      "type": "method_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def export_to_json(self, file_name) -> ReturnType:"
          ],
          "line_range": [
            65,
            65
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "with1_statement",
          "line_range": [
            66,
            67
          ]
        }
      ],
      "parent_scope": "class_TaskManager"
    },
    "with1_statement": {
      "id": "with1_statement",
      "type": "with_statement",
      "code_blocks": [],
      "parent_scope": "TaskManager_export_to_json"
    },
    "TaskManager___str__": {
      "id": "TaskManager___str__",
      "type": "method_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def __str__(self) -> ReturnType:"
          ],
          "line_range": [
            69,
            69
          ]
        },
        {
          "type": "code",
          "content": [
            "result = \"\""
          ],
          "line_range": [
            70,
            70
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "for4_loop",
          "line_range": [
            71,
            72
          ]
        },
        {
          "type": "code",
          "content": [
            "return result"
          ],
          "line_range": [
            73,
            73
          ]
        }
      ],
      "parent_scope": "class_TaskManager"
    },
    "for4_loop": {
      "id": "for4_loop",
      "type": "for_loop",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "for task in self.tasks:"
          ],
          "line_range": [
            71,
            71
          ]
        },
        {
          "type": "code",
          "content": [
            "result += task.__str__()"
          ],
          "line_range": [
            72,
            72
          ]
        }
      ],
      "parent_scope": "TaskManager___str__"
    },
    "if4_block": {
      "id": "if4_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if4"
        }
      ],
      "parent_scope": "main"
    },
    "if4": {
      "id": "if4",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if __name__ == \"__main__\":",
            "manager = TaskManager()",
            "",
            "# Add main tasks",
            "study = manager.add_task(\"Study\", \"Prepare for exams\")",
            "workout = manager.add_task(\"Workout\", \"Stay healthy\")",
            "",
            "# Add subtasks under study",
            "math = Task(\"Math\", \"Review calculus notes\")",
            "study.add_subtask(math)",
            "math.add_subtask(Task(\"Practice Problems\", \"Solve 20 questions\"))",
            "math.add_subtask(Task(\"Flashcards\", \"Revise formulas\"))",
            "",
            "cs = Task(\"CS Project\", \"Build scheduler app\")",
            "study.add_subtask(cs)",
            "cs.add_subtask(Task(\"Frontend\", \"React components\"))",
            "cs.add_subtask(Task(\"Backend\", \"Flask API\"))",
            "cs.add_subtask(Task(\"Testing\", \"Unit tests\"))",
            "",
            "# Add subtasks under workout",
            "workout.add_subtask(Task(\"Cardio\", \"Run 5 km\"))",
            "workout.add_subtask(Task(\"Strength\", \"Push-ups and squats\"))",
            "",
            "# Mark one task done",
            "manager.mark_done(\"Frontend\")",
            "",
            "# Print the task hierarchy",
            "print(manager)",
            "",
            "# Export to JSON",
            "manager.export_to_json(\"tasks.json\")",
            "print(\"Tasks exported to tasks.json \u2705\")"
          ],
          "line_range": [
            76,
            107
          ]
        }
      ],
      "parent_scope": "if4_block"
    }
  },
  "relationships": {
    "execution_flow": [
      "main"
    ],
    "dependency_graph": {}
  },
  "context_map": {
    "global_imports": [],
    "global_variables": [],
    "functions": [],
    "classes": []
  }
}