{
  "phy_chunks": {
    "main": {
      "id": "main",
      "type": "module",
      "children": [
        {
          "id": "imports",
          "type": "imports",
          "description": "import json and typing utilities",
          "line_range": [
            1,
            2
          ]
        },
        {
          "id": "class_Task",
          "type": "class_definition",
          "signature": "class Task",
          "children": [
            {
              "id": "Task___init__",
              "type": "method_definition",
              "signature": "constructor __init__(title, description, done)",
              "description": "initialize task with title, description, done status and empty subtasks list",
              "line_range": [
                6,
                10
              ]
            },
            {
              "id": "Task_add_subtask",
              "type": "method_definition",
              "signature": "method add_subtask(subtask)",
              "description": "append a subtask to the subtasks list",
              "line_range": [
                12,
                13
              ]
            },
            {
              "id": "Task_mark_done",
              "type": "method_definition",
              "signature": "method mark_done()",
              "children": [
                {
                  "id": "mark_self_done",
                  "type": "assignment",
                  "description": "set this task as done",
                  "line_range": [
                    16,
                    16
                  ]
                },
                {
                  "id": "mark_subtasks_done",
                  "type": "for_loop",
                  "description": "mark all subtasks as done recursively",
                  "line_range": [
                    17,
                    18
                  ]
                }
              ]
            },
            {
              "id": "Task_to_dict",
              "type": "method_definition",
              "signature": "method to_dict()",
              "description": "return dictionary representation with title, description, done status and subtasks converted to dictionaries",
              "line_range": [
                20,
                26
              ]
            },
            {
              "id": "Task___str__",
              "type": "method_definition",
              "signature": "method __str__(level)",
              "children": [
                {
                  "id": "format_task_display",
                  "type": "assignments",
                  "description": "create indentation, status checkbox, and formatted task string",
                  "line_range": [
                    29,
                    31
                  ]
                },
                {
                  "id": "append_subtask_strings",
                  "type": "for_loop",
                  "description": "recursively append string representations of all subtasks",
                  "line_range": [
                    32,
                    33
                  ]
                },
                {
                  "id": "return_result",
                  "type": "return_statement",
                  "description": "return the formatted string",
                  "line_range": [
                    34,
                    34
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": "class_TaskManager",
          "type": "class_definition",
          "signature": "class TaskManager",
          "children": [
            {
              "id": "TaskManager___init__",
              "type": "method_definition",
              "signature": "constructor __init__()",
              "description": "initialize with empty tasks list",
              "line_range": [
                38,
                39
              ]
            },
            {
              "id": "TaskManager_add_task",
              "type": "method_definition",
              "signature": "method add_task(title, description)",
              "description": "create new task, add to tasks list, and return the task",
              "line_range": [
                41,
                44
              ]
            },
            {
              "id": "TaskManager_find_task",
              "type": "method_definition",
              "signature": "method find_task(title)",
              "children": [
                {
                  "id": "function__find",
                  "type": "function_definition",
                  "signature": "nested function _find(task_list)",
                  "children": [
                    {
                      "id": "search_tasks",
                      "type": "for_loop",
                      "children": [
                        {
                          "id": "check_title_match",
                          "type": "if_statement",
                          "description": "if task title matches, return the task",
                          "line_range": [
                            49,
                            50
                          ]
                        },
                        {
                          "id": "recursive_search",
                          "type": "assignment",
                          "description": "recursively search in subtasks",
                          "line_range": [
                            51,
                            51
                          ]
                        },
                        {
                          "id": "return_if_found",
                          "type": "if_statement",
                          "description": "if found in subtasks, return result",
                          "line_range": [
                            52,
                            53
                          ]
                        }
                      ]
                    },
                    {
                      "id": "return_none",
                      "type": "return_statement",
                      "description": "return None if not found",
                      "line_range": [
                        54,
                        54
                      ]
                    }
                  ]
                },
                {
                  "id": "call_find",
                  "type": "return_statement",
                  "description": "call nested function with tasks list",
                  "line_range": [
                    56,
                    56
                  ]
                }
              ]
            },
            {
              "id": "TaskManager_mark_done",
              "type": "method_definition",
              "signature": "method mark_done(title)",
              "children": [
                {
                  "id": "find_task_to_mark",
                  "type": "assignment",
                  "description": "find task by title",
                  "line_range": [
                    59,
                    59
                  ]
                },
                {
                  "id": "mark_if_found",
                  "type": "if_statement",
                  "description": "if task exists, mark it done and return True",
                  "line_range": [
                    60,
                    62
                  ]
                },
                {
                  "id": "return_false",
                  "type": "return_statement",
                  "description": "return False if task not found",
                  "line_range": [
                    63,
                    63
                  ]
                }
              ]
            },
            {
              "id": "TaskManager_export_to_json",
              "type": "method_definition",
              "signature": "method export_to_json(file_name)",
              "description": "export tasks to JSON file using with statement",
              "line_range": [
                65,
                67
              ]
            },
            {
              "id": "TaskManager___str__",
              "type": "method_definition",
              "signature": "method __str__()",
              "children": [
                {
                  "id": "init_result",
                  "type": "assignment",
                  "description": "initialize empty result string",
                  "line_range": [
                    70,
                    70
                  ]
                },
                {
                  "id": "concat_task_strings",
                  "type": "for_loop",
                  "description": "concatenate string representation of each task",
                  "line_range": [
                    71,
                    72
                  ]
                },
                {
                  "id": "return_result",
                  "type": "return_statement",
                  "description": "return concatenated result",
                  "line_range": [
                    73,
                    73
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": "main_execution",
          "type": "if_statement",
          "description": "when run as main: create task manager, add hierarchical tasks (study with math and CS subtasks, workout with cardio and strength), mark frontend task done, print task hierarchy, and export to JSON",
          "line_range": [
            76,
            107
          ]
        }
      ]
    }
  },
  "metadata": {
    "source_py": "/Users/krishnapagrut/Developer/hcli/test.py"
  }
}