{
  "phy_chunks": {
    "main": {
      "id": "main",
      "type": "module",
      "children": [
        {
          "id": "module_docstring",
          "type": "docstring",
          "description": "module docstring describing a diff analyzer that combines file diffing and AST mapping",
          "line_range": [
            2,
            5
          ]
        },
        {
          "id": "imports",
          "type": "import_block",
          "description": "import standard libraries: json, argparse, pathlib, typing, dataclasses, difflib, enum",
          "line_range": [
            7,
            13
          ]
        },
        {
          "id": "class_ChangeType",
          "type": "class_definition",
          "signature": "class ChangeType",
          "children": [
            {
              "id": "change_constants",
              "type": "class_attributes",
              "description": "define constants for change types: ADDED, REMOVED, CHANGED, UNCHANGED",
              "line_range": [
                16,
                19
              ]
            }
          ]
        },
        {
          "id": "class_DiffResult",
          "type": "class_definition",
          "signature": "class DiffResult",
          "children": [
            {
              "id": "diff_result_fields",
              "type": "class_attributes",
              "description": "dataclass fields: line_num, change_type, original_content, modified_content",
              "line_range": [
                23,
                26
              ]
            }
          ]
        },
        {
          "id": "class_OutputLineMapping",
          "type": "class_definition",
          "signature": "class OutputLineMapping",
          "children": [
            {
              "id": "output_mapping_fields",
              "type": "class_attributes",
              "description": "dataclass fields for mapping output lines to AST nodes: line_number, node_id, node_type, signature, description, line_range, content",
              "line_range": [
                30,
                36
              ]
            }
          ]
        },
        {
          "id": "class_ChangeAnalysis",
          "type": "class_definition",
          "signature": "class ChangeAnalysis",
          "children": [
            {
              "id": "change_analysis_fields",
              "type": "class_attributes",
              "description": "dataclass fields for analyzing changes: node_id, node_type, signature, description, line_range, change_type, affected_output_lines, original_content, modified_content",
              "line_range": [
                40,
                48
              ]
            }
          ]
        },
        {
          "id": "class_DiffAnalyzer",
          "type": "class_definition",
          "signature": "class DiffAnalyzer",
          "children": [
            {
              "id": "DiffAnalyzer___init__",
              "type": "method_definition",
              "signature": "method __init__(takes ast_json_file, file1_path, file2_path)",
              "children": [
                {
                  "id": "init_attributes",
                  "type": "assignment_block",
                  "description": "initialize instance attributes for file paths, ast_data, output_line_mappings, and file lines",
                  "line_range": [
                    52,
                    58
                  ]
                }
              ]
            },
            {
              "id": "DiffAnalyzer_load_files",
              "type": "method_definition",
              "signature": "method load_files()",
              "children": [
                {
                  "id": "load_files_try",
                  "type": "try_statement",
                  "description": "load both files and AST data from disk, validate AST JSON structure, return success/failure status",
                  "line_range": [
                    62,
                    79
                  ]
                }
              ]
            },
            {
              "id": "DiffAnalyzer_get_detailed_diff",
              "type": "method_definition",
              "signature": "method get_detailed_diff()",
              "children": [
                {
                  "id": "diff_early_return",
                  "type": "if_statement",
                  "description": "return empty list if either file is empty",
                  "line_range": [
                    83,
                    84
                  ]
                },
                {
                  "id": "diff_setup",
                  "type": "assignment_block",
                  "description": "initialize results list and create SequenceMatcher for comparing file lines",
                  "line_range": [
                    86,
                    87
                  ]
                },
                {
                  "id": "diff_processing_loop",
                  "type": "for_loop",
                  "description": "process each diff operation (equal/delete/insert/replace) and create DiffResult objects with appropriate change types",
                  "line_range": [
                    89,
                    129
                  ]
                }
              ]
            },
            {
              "id": "DiffAnalyzer_build_output_line_mappings",
              "type": "method_definition",
              "signature": "method build_output_line_mappings()",
              "children": [
                {
                  "id": "build_mappings_early_return",
                  "type": "if_statement",
                  "description": "return early if no AST data is available",
                  "line_range": [
                    135,
                    136
                  ]
                },
                {
                  "id": "build_mappings_setup",
                  "type": "assignment_block",
                  "description": "initialize output line mappings and get root AST node",
                  "line_range": [
                    138,
                    139
                  ]
                },
                {
                  "id": "function_render_node_with_mapping",
                  "type": "function_definition",
                  "signature": "nested function render_node_with_mapping(takes node, indent, line_counter)",
                  "children": [
                    {
                      "id": "render_setup",
                      "type": "assignment_block",
                      "description": "initialize rendering variables: lines list, padding, node properties",
                      "line_range": [
                        143,
                        150
                      ]
                    },
                    {
                      "id": "line_info_setup",
                      "type": "assignment_block",
                      "description": "create line range info string if available",
                      "line_range": [
                        153,
                        155
                      ]
                    },
                    {
                      "id": "render_content_logic",
                      "type": "if_else_block",
                      "description": "render node signature and description with proper indentation, create output line mappings for each rendered line",
                      "line_range": [
                        158,
                        203
                      ]
                    },
                    {
                      "id": "render_children",
                      "type": "for_loop",
                      "description": "recursively render child nodes with increased indentation",
                      "line_range": [
                        206,
                        207
                      ]
                    }
                  ]
                },
                {
                  "id": "render_call",
                  "type": "function_call",
                  "description": "call the nested rendering function on the root node",
                  "line_range": [
                    212,
                    212
                  ]
                }
              ]
            },
            {
              "id": "DiffAnalyzer_find_ast_node_for_output_line",
              "type": "method_definition",
              "signature": "method find_ast_node_for_output_line(takes output_line_num)",
              "children": [
                {
                  "id": "find_node_loop",
                  "type": "for_loop",
                  "description": "search through output line mappings to find matching line number and return the corresponding mapping",
                  "line_range": [
                    216,
                    218
                  ]
                }
              ]
            },
            {
              "id": "DiffAnalyzer_analyze_changes",
              "type": "method_definition",
              "signature": "method analyze_changes()",
              "children": [
                {
                  "id": "analyze_early_return",
                  "type": "if_statement",
                  "description": "return empty list if files cannot be loaded",
                  "line_range": [
                    223,
                    224
                  ]
                },
                {
                  "id": "analyze_setup",
                  "type": "assignment_block",
                  "description": "get detailed diff results, build output line mappings, initialize changes list and processed node IDs set",
                  "line_range": [
                    227,
                    234
                  ]
                },
                {
                  "id": "analyze_changes_loop",
                  "type": "for_loop",
                  "description": "process each diff result: skip unchanged lines, find corresponding AST node, create ChangeAnalysis object if node found and not already processed",
                  "line_range": [
                    236,
                    256
                  ]
                }
              ]
            },
            {
              "id": "DiffAnalyzer_to_json",
              "type": "method_definition",
              "signature": "method to_json(takes changes)",
              "children": [
                {
                  "id": "json_conversion_setup",
                  "type": "assignment",
                  "description": "initialize changes dictionary list",
                  "line_range": [
                    263,
                    263
                  ]
                },
                {
                  "id": "json_conversion_loop",
                  "type": "for_loop",
                  "description": "convert each change to dictionary format, handle line_range tuple conversion to list",
                  "line_range": [
                    264,
                    269
                  ]
                },
                {
                  "id": "json_result_creation",
                  "type": "assignment_block",
                  "description": "create result dictionary with file paths, AST file, total changes count, and changes list",
                  "line_range": [
                    271,
                    277
                  ]
                },
                {
                  "id": "json_return",
                  "type": "return_statement",
                  "description": "return JSON string with proper indentation",
                  "line_range": [
                    279,
                    279
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": "function_main",
          "type": "function_definition",
          "signature": "function main()",
          "children": [
            {
              "id": "argument_parser_setup",
              "type": "assignment_block",
              "description": "create argument parser with description and add arguments for AST JSON file, two comparison files, and optional output file",
              "line_range": [
                282,
                286
              ]
            },
            {
              "id": "parse_and_analyze",
              "type": "assignment_block",
              "description": "parse command line arguments, create DiffAnalyzer instance, analyze changes, and convert to JSON",
              "line_range": [
                288,
                295
              ]
            },
            {
              "id": "output_handling",
              "type": "if_else_block",
              "description": "write JSON output to file if output argument provided, otherwise print to stdout",
              "line_range": [
                297,
                302
              ]
            }
          ]
        },
        {
          "id": "main_execution",
          "type": "if_statement",
          "description": "call main function when script is run directly",
          "line_range": [
            304,
            305
          ]
        }
      ]
    }
  },
  "metadata": {
    "source_py": "/Users/krishnapagrut/Developer/hcli/diff_analyzer.py"
  }
}