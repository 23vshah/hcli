{
  "phy_chunks": {
    "main": {
      "id": "main",
      "type": "module",
      "children": [
        {
          "id": "imports_block",
          "type": "imports",
          "description": "import json, subprocess, pathlib.Path, and argparse modules",
          "line_range": [
            1,
            3
          ]
        },
        {
          "id": "function_generate_pyh_with_claude",
          "type": "function_definition",
          "signature": "function generate_pyh_with_claude(json_file, pyh_file, py_file)",
          "children": [
            {
              "id": "data_loading",
              "type": "assignment",
              "description": "read input JSON file content into data variable",
              "line_range": [
                6,
                6
              ]
            },
            {
              "id": "prompt_construction",
              "type": "assignment",
              "description": "construct a large multi-line prompt string with rules, examples, and data for Claude API",
              "line_range": [
                9,
                242
              ]
            },
            {
              "id": "claude_api_call",
              "type": "subprocess_call",
              "description": "execute Claude CLI command with the prompt and capture output",
              "line_range": [
                243,
                247
              ]
            },
            {
              "id": "output_extraction",
              "type": "assignment",
              "description": "extract and strip the stdout from Claude's response",
              "line_range": [
                249,
                249
              ]
            },
            {
              "id": "if1_block_abstract",
              "type": "if_else_block",
              "children": [
                {
                  "id": "if1_abstract",
                  "type": "if_statement",
                  "description": "clean output by removing markdown code block delimiters (```json or '''json)",
                  "line_range": [
                    251,
                    252
                  ]
                }
              ]
            },
            {
              "id": "if2_block_abstract",
              "type": "if_else_block",
              "children": [
                {
                  "id": "if2_abstract",
                  "type": "if_statement",
                  "description": "handle subprocess error by printing error message",
                  "line_range": [
                    256,
                    257
                  ]
                },
                {
                  "id": "else1_abstract",
                  "type": "else_statement",
                  "children": [
                    {
                      "id": "json_parsing",
                      "type": "try_except_block",
                      "description": "attempt to parse Claude output as JSON, print error and return if parsing fails",
                      "line_range": [
                        259,
                        263
                      ]
                    },
                    {
                      "id": "path_resolution",
                      "type": "assignment",
                      "description": "resolve absolute path of input JSON file",
                      "line_range": [
                        266,
                        266
                      ]
                    },
                    {
                      "id": "if3_block_abstract",
                      "type": "if_else_block",
                      "children": [
                        {
                          "id": "if3_abstract",
                          "type": "if_statement",
                          "description": "if file is in /out directory, reconstruct relative path to original .py file",
                          "line_range": [
                            267,
                            272
                          ]
                        },
                        {
                          "id": "else2_abstract",
                          "type": "else_statement",
                          "description": "fallback: use same name but with .py extension",
                          "line_range": [
                            275,
                            275
                          ]
                        }
                      ]
                    },
                    {
                      "id": "metadata_injection",
                      "type": "assignment",
                      "description": "inject metadata with source Python file path into the parsed data",
                      "line_range": [
                        277,
                        279
                      ]
                    },
                    {
                      "id": "file_output",
                      "type": "file_write",
                      "description": "write the processed data to output .pyh.json file and print success message",
                      "line_range": [
                        281,
                        282
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": "argparse_import",
          "type": "import",
          "description": "import argparse module",
          "line_range": [
            287,
            287
          ]
        },
        {
          "id": "if4_abstract",
          "type": "if_statement",
          "description": "main execution block: set up argument parser for input file, py file, and optional output file, then call generate_pyh_with_claude function",
          "line_range": [
            289,
            304
          ]
        }
      ]
    }
  },
  "metadata": {
    "source_py": "/Users/krishnapagrut/Developer/hcli/pyh_ast_generator.py"
  }
}