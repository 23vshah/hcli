{
  "metadata": {
    "original_file": "/Users/krishnapagrut/Developer/hcli/apply_diff.py",
    "total_chunks": 11,
    "chunking_method": "ast_semantic",
    "timestamp": "2025-09-14T01:54:27.023622"
  },
  "chunks": {
    "main": {
      "id": "main",
      "type": "module",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "\"\"\"",
            "apply_diff_with_claude.py",
            "Apply user edits (captured as diffs) back onto original Python code using Claude SDK.",
            "\"\"\""
          ],
          "line_range": [
            2,
            5
          ]
        },
        {
          "type": "code",
          "content": [
            "import json"
          ],
          "line_range": [
            7,
            7
          ]
        },
        {
          "type": "code",
          "content": [
            "from pathlib import Path"
          ],
          "line_range": [
            8,
            8
          ]
        },
        {
          "type": "code",
          "content": [
            "import argparse"
          ],
          "line_range": [
            9,
            9
          ]
        },
        {
          "type": "code",
          "content": [
            "import anthropic  # Claude SDK"
          ],
          "line_range": [
            10,
            10
          ]
        },
        {
          "type": "code",
          "content": [
            "import subprocess"
          ],
          "line_range": [
            11,
            11
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "function_apply_diff_to_file",
          "line_range": [
            14,
            81
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if3_block",
          "line_range": [
            83,
            93
          ]
        }
      ],
      "parent_scope": null
    },
    "function_apply_diff_to_file": {
      "id": "function_apply_diff_to_file",
      "type": "function_definition",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "def apply_diff_to_file(diff_file, original_py, output_py) -> None:"
          ],
          "line_range": [
            14,
            14
          ]
        },
        {
          "type": "code",
          "content": [
            "diff_text = Path(diff_file).read_text()"
          ],
          "line_range": [
            16,
            16
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "try1_block",
          "line_range": [
            17,
            21
          ]
        },
        {
          "type": "code",
          "content": [
            "original_code = Path(original_py).read_text()"
          ],
          "line_range": [
            23,
            23
          ]
        },
        {
          "type": "code",
          "content": [
            "prompt = f\"\"\"",
            "You are an assistant that applies **abstracted diffs** back onto original Python code.",
            "",
            "## Context",
            "- The user edits Python code indirectly by changing a natural-language `.pyh.json`.",
            "- We now have a diff JSON (`diff.json`) describing:",
            "- Which AST nodes or sections changed.",
            "- What was added/removed/modified in plain language.",
            "- Your job: rewrite the original Python file so it **fully reflects the user\u2019s intended changes**.",
            "",
            "## Rules",
            "- Strictly follow the changes mentioned in the diff and make changes to the referred file according to the lines specified.",
            "- Identify any affected files or functions in the repo from these changes. If necessary, make any required changes to them.",
            "- Be very careful. Only change the code that needs to be changed according to the diffs.",
            "- Preserve all unaffected code exactly as-is.",
            "- Apply every diff faithfully:",
            "- If a constructor gains a new parameter \u2192 add it everywhere (signature + assignments).",
            "- If a method changes logic \u2192 update its implementation accordingly.",
            "- If a class/method is removed \u2192 remove it.",
            "- If diff implies major restructuring, rewrite the file consistently.",
            "- Keep formatting PEP8-compliant.",
            "- Do not output explanations, only code.",
            "",
            "---",
            "",
            "Actual Diff",
            "",
            "{json.dumps(diff_data, indent=2)}",
            "",
            "File to change:",
            "\"metadata\": {{",
            "\"source_file\": \"/Users/krishnapagrut/Developer/hcli/test.py\"",
            "}}",
            "",
            "Return all the paths and changes made.",
            "\"\"\""
          ],
          "line_range": [
            26,
            61
          ]
        },
        {
          "type": "code",
          "content": [
            "result = subprocess.run(",
            "[\"claude\", prompt],",
            "capture_output=True,",
            "text=True",
            ")"
          ],
          "line_range": [
            64,
            68
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if1_block",
          "line_range": [
            70,
            72
          ]
        },
        {
          "type": "code",
          "content": [
            "output = result.stdout.strip()"
          ],
          "line_range": [
            74,
            74
          ]
        },
        {
          "type": "chunk_ref",
          "chunk_id": "if2_block",
          "line_range": [
            77,
            78
          ]
        },
        {
          "type": "code",
          "content": [
            "Path(output_py).write_text(output)"
          ],
          "line_range": [
            80,
            80
          ]
        },
        {
          "type": "code",
          "content": [
            "print(f\"\u2705 Updated file written to {output_py}\")"
          ],
          "line_range": [
            81,
            81
          ]
        }
      ],
      "parent_scope": "main"
    },
    "try1_block": {
      "id": "try1_block",
      "type": "try_statement",
      "code_blocks": [],
      "parent_scope": "function_apply_diff_to_file"
    },
    "if1_block": {
      "id": "if1_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if1"
        }
      ],
      "parent_scope": "function_apply_diff_to_file"
    },
    "if1": {
      "id": "if1",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if result.returncode != 0:",
            "print(\"\u274c Claude CLI error:\", result.stderr.strip())",
            "return"
          ],
          "line_range": [
            70,
            72
          ]
        }
      ],
      "parent_scope": "if1_block"
    },
    "if2_block": {
      "id": "if2_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if2"
        }
      ],
      "parent_scope": "function_apply_diff_to_file"
    },
    "if2": {
      "id": "if2",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if output.startswith(\"```python\") and output.endswith(\"```\"):",
            "output = output[len(\"```python\"): -len(\"```\")].strip()"
          ],
          "line_range": [
            77,
            78
          ]
        }
      ],
      "parent_scope": "if2_block"
    },
    "if3_block": {
      "id": "if3_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if3"
        }
      ],
      "parent_scope": "main"
    },
    "if3": {
      "id": "if3",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if __name__ == \"__main__\":",
            "parser = argparse.ArgumentParser(description=\"Apply diff back onto Python code using Claude\")",
            "parser.add_argument(\"diff\", help=\"Diff JSON file (from diff_analyzer)\")",
            "parser.add_argument(\"original\", help=\"Original Python file\")",
            "parser.add_argument(\"-o\", \"--output\", help=\"Output updated Python file\")",
            "args = parser.parse_args()",
            "",
            "if args.output is None:",
            "args.output = args.original.replace(\".py\", \".updated.py\")",
            "",
            "apply_diff_to_file(args.diff, args.original, args.output)"
          ],
          "line_range": [
            83,
            93
          ]
        }
      ],
      "parent_scope": "if3_block"
    },
    "if4_block": {
      "id": "if4_block",
      "type": "if_else_block",
      "code_blocks": [
        {
          "type": "chunk_ref",
          "chunk_id": "if4"
        }
      ],
      "parent_scope": "if3"
    },
    "if4": {
      "id": "if4",
      "type": "if_statement",
      "code_blocks": [
        {
          "type": "code",
          "content": [
            "if args.output is None:",
            "args.output = args.original.replace(\".py\", \".updated.py\")"
          ],
          "line_range": [
            90,
            91
          ]
        }
      ],
      "parent_scope": "if4_block"
    }
  },
  "relationships": {
    "execution_flow": [
      "main"
    ],
    "dependency_graph": {}
  },
  "context_map": {
    "global_imports": [],
    "global_variables": [],
    "functions": [],
    "classes": []
  }
}