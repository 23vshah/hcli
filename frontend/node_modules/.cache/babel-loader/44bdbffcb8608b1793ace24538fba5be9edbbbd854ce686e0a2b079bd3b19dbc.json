{"ast":null,"code":"import { create } from 'zustand';\nconst initialRepositoryState = {\n  isConnected: false,\n  repoUrl: '',\n  branch: 'main',\n  files: [],\n  selectedFile: null\n};\nconst initialEditorState = {\n  pyhContent: '',\n  pyContent: '',\n  lineMappings: [],\n  diffs: [],\n  isEditing: false,\n  hasUnsavedChanges: false\n};\nexport const useStore = create((set, get) => ({\n  // Initial state\n  repository: initialRepositoryState,\n  editor: initialEditorState,\n  isLoading: false,\n  error: null,\n  // Repository actions\n  setRepository: repo => set(state => ({\n    repository: {\n      ...state.repository,\n      ...repo\n    }\n  })),\n  cloneRepository: async (url, branch) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await fetch('/api/clone', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          repo_url: url,\n          branch\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to clone repository');\n      }\n\n      // Fetch files after cloning\n      const filesResponse = await fetch('/api/files');\n      const filesData = await filesResponse.json();\n      set({\n        repository: {\n          isConnected: true,\n          repoUrl: url,\n          branch,\n          files: filesData.files,\n          selectedFile: null\n        },\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        error: error instanceof Error ? error.message : 'Unknown error',\n        isLoading: false\n      });\n    }\n  },\n  selectFile: async filePath => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // Load Python file content\n      const pyResponse = await fetch(`/api/file/${filePath}`);\n      const pyData = await pyResponse.json();\n\n      // Load PHY output (human-readable format)\n      const pyhResponse = await fetch(`/api/pyh-output/${filePath}`);\n      const pyhData = pyhResponse.ok ? await pyhResponse.json() : null;\n      set(state => ({\n        repository: {\n          ...state.repository,\n          selectedFile: filePath\n        },\n        editor: {\n          ...state.editor,\n          pyContent: pyData.content,\n          pyhContent: (pyhData === null || pyhData === void 0 ? void 0 : pyhData.content) || '',\n          lineMappings: (pyhData === null || pyhData === void 0 ? void 0 : pyhData.line_mappings) || [],\n          hasUnsavedChanges: false\n        },\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        error: error instanceof Error ? error.message : 'Failed to load file',\n        isLoading: false\n      });\n    }\n  },\n  // Editor actions\n  setEditor: editor => set(state => ({\n    editor: {\n      ...state.editor,\n      ...editor\n    }\n  })),\n  updatePyhContent: content => set(state => ({\n    editor: {\n      ...state.editor,\n      pyhContent: content,\n      hasUnsavedChanges: true\n    }\n  })),\n  addDiff: diff => set(state => ({\n    editor: {\n      ...state.editor,\n      diffs: [...state.editor.diffs, diff]\n    }\n  })),\n  clearDiffs: () => set(state => ({\n    editor: {\n      ...state.editor,\n      diffs: []\n    }\n  })),\n  // App actions\n  setLoading: loading => set({\n    isLoading: loading\n  }),\n  setError: error => set({\n    error\n  })\n}));","map":{"version":3,"names":["create","initialRepositoryState","isConnected","repoUrl","branch","files","selectedFile","initialEditorState","pyhContent","pyContent","lineMappings","diffs","isEditing","hasUnsavedChanges","useStore","set","get","repository","editor","isLoading","error","setRepository","repo","state","cloneRepository","url","response","fetch","method","headers","body","JSON","stringify","repo_url","ok","Error","filesResponse","filesData","json","message","selectFile","filePath","pyResponse","pyData","pyhResponse","pyhData","content","line_mappings","setEditor","updatePyhContent","addDiff","diff","clearDiffs","setLoading","loading","setError"],"sources":["/Users/krishnapagrut/Developer/hcli/frontend/src/hooks/useStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { AppState, RepositoryState, EditorState } from '../types';\n\nconst initialRepositoryState: RepositoryState = {\n  isConnected: false,\n  repoUrl: '',\n  branch: 'main',\n  files: [],\n  selectedFile: null,\n};\n\nconst initialEditorState: EditorState = {\n  pyhContent: '',\n  pyContent: '',\n  lineMappings: [],\n  diffs: [],\n  isEditing: false,\n  hasUnsavedChanges: false,\n};\n\ninterface AppStore extends AppState {\n  // Repository actions\n  setRepository: (repo: Partial<RepositoryState>) => void;\n  cloneRepository: (url: string, branch: string) => Promise<void>;\n  selectFile: (filePath: string) => Promise<void>;\n  \n  // Editor actions\n  setEditor: (editor: Partial<EditorState>) => void;\n  updatePyhContent: (content: string) => void;\n  addDiff: (diff: any) => void;\n  clearDiffs: () => void;\n  \n  // App actions\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n}\n\nexport const useStore = create<AppStore>((set, get) => ({\n  // Initial state\n  repository: initialRepositoryState,\n  editor: initialEditorState,\n  isLoading: false,\n  error: null,\n\n  // Repository actions\n  setRepository: (repo) =>\n    set((state) => ({\n      repository: { ...state.repository, ...repo },\n    })),\n\n  cloneRepository: async (url: string, branch: string) => {\n    set({ isLoading: true, error: null });\n    try {\n      const response = await fetch('/api/clone', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ repo_url: url, branch }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to clone repository');\n      }\n      \n      // Fetch files after cloning\n      const filesResponse = await fetch('/api/files');\n      const filesData = await filesResponse.json();\n      \n      set({\n        repository: {\n          isConnected: true,\n          repoUrl: url,\n          branch,\n          files: filesData.files,\n          selectedFile: null,\n        },\n        isLoading: false,\n      });\n    } catch (error) {\n      set({\n        error: error instanceof Error ? error.message : 'Unknown error',\n        isLoading: false,\n      });\n    }\n  },\n\n  selectFile: async (filePath: string) => {\n    set({ isLoading: true, error: null });\n    try {\n      // Load Python file content\n      const pyResponse = await fetch(`/api/file/${filePath}`);\n      const pyData = await pyResponse.json();\n      \n      // Load PHY output (human-readable format)\n      const pyhResponse = await fetch(`/api/pyh-output/${filePath}`);\n      const pyhData = pyhResponse.ok ? await pyhResponse.json() : null;\n      \n      set((state) => ({\n        repository: { ...state.repository, selectedFile: filePath },\n        editor: {\n          ...state.editor,\n          pyContent: pyData.content,\n          pyhContent: pyhData?.content || '',\n          lineMappings: pyhData?.line_mappings || [],\n          hasUnsavedChanges: false,\n        },\n        isLoading: false,\n      }));\n    } catch (error) {\n      set({\n        error: error instanceof Error ? error.message : 'Failed to load file',\n        isLoading: false,\n      });\n    }\n  },\n\n  // Editor actions\n  setEditor: (editor) =>\n    set((state) => ({\n      editor: { ...state.editor, ...editor },\n    })),\n\n  updatePyhContent: (content) =>\n    set((state) => ({\n      editor: {\n        ...state.editor,\n        pyhContent: content,\n        hasUnsavedChanges: true,\n      },\n    })),\n\n  addDiff: (diff) =>\n    set((state) => ({\n      editor: {\n        ...state.editor,\n        diffs: [...state.editor.diffs, diff],\n      },\n    })),\n\n  clearDiffs: () =>\n    set((state) => ({\n      editor: {\n        ...state.editor,\n        diffs: [],\n      },\n    })),\n\n  // App actions\n  setLoading: (loading) => set({ isLoading: loading }),\n  setError: (error) => set({ error }),\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}