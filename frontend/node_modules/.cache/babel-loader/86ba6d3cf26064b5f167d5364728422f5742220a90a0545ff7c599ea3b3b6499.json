{"ast":null,"code":"import _objectSpread from\"/Users/krishnapagrut/Developer/hcli/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{create}from'zustand';const initialRepositoryState={isConnected:false,repoUrl:'',branch:'main',files:[],selectedFile:null};const initialEditorState={pyhContent:'',pyContent:'',lineMappings:[],diffs:[],isEditing:false,hasUnsavedChanges:false};export const useStore=create((set,get)=>({// Initial state\nrepository:initialRepositoryState,editor:initialEditorState,isLoading:false,error:null,// Repository actions\nsetRepository:repo=>set(state=>({repository:_objectSpread(_objectSpread({},state.repository),repo)})),cloneRepository:async(url,branch)=>{set({isLoading:true,error:null});try{const response=await fetch('/api/clone',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({repo_url:url,branch})});if(!response.ok){throw new Error('Failed to clone repository');}// Fetch files after cloning\nconst filesResponse=await fetch('/api/files');const filesData=await filesResponse.json();set({repository:{isConnected:true,repoUrl:url,branch,files:filesData.files,selectedFile:null},isLoading:false});}catch(error){set({error:error instanceof Error?error.message:'Unknown error',isLoading:false});}},selectFile:async filePath=>{set({isLoading:true,error:null});try{// Load Python file content\nconst pyResponse=await fetch(\"/api/file/\".concat(filePath));const pyData=await pyResponse.json();// Load PHY output (human-readable format)\nconst pyhPath=filePath.replace('.py','.pyh.json');const pyhResponse=await fetch(\"/api/pyh-output/\".concat(pyhPath));const pyhData=pyhResponse.ok?await pyhResponse.json():null;set(state=>({repository:_objectSpread(_objectSpread({},state.repository),{},{selectedFile:filePath}),editor:_objectSpread(_objectSpread({},state.editor),{},{pyContent:pyData.content,pyhContent:(pyhData===null||pyhData===void 0?void 0:pyhData.content)||'',lineMappings:(pyhData===null||pyhData===void 0?void 0:pyhData.line_mappings)||[],hasUnsavedChanges:false}),isLoading:false}));}catch(error){set({error:error instanceof Error?error.message:'Failed to load file',isLoading:false});}},// Editor actions\nsetEditor:editor=>set(state=>({editor:_objectSpread(_objectSpread({},state.editor),editor)})),updatePyhContent:content=>set(state=>({editor:_objectSpread(_objectSpread({},state.editor),{},{pyhContent:content,hasUnsavedChanges:true})})),addDiff:diff=>set(state=>({editor:_objectSpread(_objectSpread({},state.editor),{},{diffs:[...state.editor.diffs,diff]})})),clearDiffs:()=>set(state=>({editor:_objectSpread(_objectSpread({},state.editor),{},{diffs:[]})})),// App actions\nsetLoading:loading=>set({isLoading:loading}),setError:error=>set({error})}));","map":{"version":3,"names":["create","initialRepositoryState","isConnected","repoUrl","branch","files","selectedFile","initialEditorState","pyhContent","pyContent","lineMappings","diffs","isEditing","hasUnsavedChanges","useStore","set","get","repository","editor","isLoading","error","setRepository","repo","state","_objectSpread","cloneRepository","url","response","fetch","method","headers","body","JSON","stringify","repo_url","ok","Error","filesResponse","filesData","json","message","selectFile","filePath","pyResponse","concat","pyData","pyhPath","replace","pyhResponse","pyhData","content","line_mappings","setEditor","updatePyhContent","addDiff","diff","clearDiffs","setLoading","loading","setError"],"sources":["/Users/krishnapagrut/Developer/hcli/frontend/src/hooks/useStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { AppState, RepositoryState, EditorState } from '../types';\n\nconst initialRepositoryState: RepositoryState = {\n  isConnected: false,\n  repoUrl: '',\n  branch: 'main',\n  files: [],\n  selectedFile: null,\n};\n\nconst initialEditorState: EditorState = {\n  pyhContent: '',\n  pyContent: '',\n  lineMappings: [],\n  diffs: [],\n  isEditing: false,\n  hasUnsavedChanges: false,\n};\n\ninterface AppStore extends AppState {\n  // Repository actions\n  setRepository: (repo: Partial<RepositoryState>) => void;\n  cloneRepository: (url: string, branch: string) => Promise<void>;\n  selectFile: (filePath: string) => Promise<void>;\n  \n  // Editor actions\n  setEditor: (editor: Partial<EditorState>) => void;\n  updatePyhContent: (content: string) => void;\n  addDiff: (diff: any) => void;\n  clearDiffs: () => void;\n  \n  // App actions\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n}\n\nexport const useStore = create<AppStore>((set, get) => ({\n  // Initial state\n  repository: initialRepositoryState,\n  editor: initialEditorState,\n  isLoading: false,\n  error: null,\n\n  // Repository actions\n  setRepository: (repo) =>\n    set((state) => ({\n      repository: { ...state.repository, ...repo },\n    })),\n\n  cloneRepository: async (url: string, branch: string) => {\n    set({ isLoading: true, error: null });\n    try {\n      const response = await fetch('/api/clone', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ repo_url: url, branch }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to clone repository');\n      }\n      \n      // Fetch files after cloning\n      const filesResponse = await fetch('/api/files');\n      const filesData = await filesResponse.json();\n      \n      set({\n        repository: {\n          isConnected: true,\n          repoUrl: url,\n          branch,\n          files: filesData.files,\n          selectedFile: null,\n        },\n        isLoading: false,\n      });\n    } catch (error) {\n      set({\n        error: error instanceof Error ? error.message : 'Unknown error',\n        isLoading: false,\n      });\n    }\n  },\n\n  selectFile: async (filePath: string) => {\n    set({ isLoading: true, error: null });\n    try {\n      // Load Python file content\n      const pyResponse = await fetch(`/api/file/${filePath}`);\n      const pyData = await pyResponse.json();\n      \n      // Load PHY output (human-readable format)\n      const pyhPath = filePath.replace('.py', '.pyh.json');\n      const pyhResponse = await fetch(`/api/pyh-output/${pyhPath}`);\n      const pyhData = pyhResponse.ok ? await pyhResponse.json() : null;\n      \n      set((state) => ({\n        repository: { ...state.repository, selectedFile: filePath },\n        editor: {\n          ...state.editor,\n          pyContent: pyData.content,\n          pyhContent: pyhData?.content || '',\n          lineMappings: pyhData?.line_mappings || [],\n          hasUnsavedChanges: false,\n        },\n        isLoading: false,\n      }));\n    } catch (error) {\n      set({\n        error: error instanceof Error ? error.message : 'Failed to load file',\n        isLoading: false,\n      });\n    }\n  },\n\n  // Editor actions\n  setEditor: (editor) =>\n    set((state) => ({\n      editor: { ...state.editor, ...editor },\n    })),\n\n  updatePyhContent: (content) =>\n    set((state) => ({\n      editor: {\n        ...state.editor,\n        pyhContent: content,\n        hasUnsavedChanges: true,\n      },\n    })),\n\n  addDiff: (diff) =>\n    set((state) => ({\n      editor: {\n        ...state.editor,\n        diffs: [...state.editor.diffs, diff],\n      },\n    })),\n\n  clearDiffs: () =>\n    set((state) => ({\n      editor: {\n        ...state.editor,\n        diffs: [],\n      },\n    })),\n\n  // App actions\n  setLoading: (loading) => set({ isLoading: loading }),\n  setError: (error) => set({ error }),\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}